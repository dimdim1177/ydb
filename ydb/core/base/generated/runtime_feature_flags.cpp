// Auto-generated by ydb/core/base/generated/codegen/__main__.py, do not modify.
#include <ydb/core/base/generated/runtime_feature_flags.h>
#include <ydb/core/protos/feature_flags.pb.h>

namespace NKikimr {


std::tuple<ui64, ui64> TRuntimeFeatureFlags::BitsFromProto_slot0(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 bits = 0;
    ui64 mask = 0;
    if (flags.HasEnableSeparateSolomonShardForPDisk()) {
        bits |= flags.GetEnableSeparateSolomonShardForPDisk() ? 3ULL : 1ULL;
        mask |= 3ULL;
    }
    if (flags.HasUseForsetiSchedulerByDefaultForPDisk()) {
        bits |= flags.GetUseForsetiSchedulerByDefaultForPDisk() ? 12ULL : 4ULL;
        mask |= 12ULL;
    }
    if (flags.HasEnableSeparateTrimThreadForPDisk()) {
        bits |= flags.GetEnableSeparateTrimThreadForPDisk() ? 48ULL : 16ULL;
        mask |= 48ULL;
    }
    if (flags.HasEnableSeparateSubmitThreadForPDisk()) {
        bits |= flags.GetEnableSeparateSubmitThreadForPDisk() ? 192ULL : 64ULL;
        mask |= 192ULL;
    }
    if (flags.HasEnablePerOwnerChunkLimitForPDisk()) {
        bits |= flags.GetEnablePerOwnerChunkLimitForPDisk() ? 768ULL : 256ULL;
        mask |= 768ULL;
    }
    if (flags.HasTrimEntireDeviceOnStartup()) {
        bits |= flags.GetTrimEntireDeviceOnStartup() ? 3072ULL : 1024ULL;
        mask |= 3072ULL;
    }
    if (flags.HasEnableChunkGraceForPDisk()) {
        bits |= flags.GetEnableChunkGraceForPDisk() ? 12288ULL : 4096ULL;
        mask |= 12288ULL;
    }
    if (flags.HasAllowConsistentOperationsForSchemeShard()) {
        bits |= flags.GetAllowConsistentOperationsForSchemeShard() ? 49152ULL : 16384ULL;
        mask |= 49152ULL;
    }
    if (flags.HasEnableSchemeBoard()) {
        bits |= flags.GetEnableSchemeBoard() ? 196608ULL : 65536ULL;
        mask |= 196608ULL;
    }
    if (flags.HasAllowYdbRequestsWithoutDatabase()) {
        bits |= flags.GetAllowYdbRequestsWithoutDatabase() ? 786432ULL : 262144ULL;
        mask |= 786432ULL;
    }
    if (flags.HasEnableExternalSubdomains()) {
        bits |= flags.GetEnableExternalSubdomains() ? 3145728ULL : 1048576ULL;
        mask |= 3145728ULL;
    }
    if (flags.HasAllowRecursiveMkDir()) {
        bits |= flags.GetAllowRecursiveMkDir() ? 12582912ULL : 4194304ULL;
        mask |= 12582912ULL;
    }
    if (flags.HasAllowHugeKeyValueDeletes()) {
        bits |= flags.GetAllowHugeKeyValueDeletes() ? 50331648ULL : 16777216ULL;
        mask |= 50331648ULL;
    }
    if (flags.HasSendSchemaVersionToDatashard()) {
        bits |= flags.GetSendSchemaVersionToDatashard() ? 201326592ULL : 67108864ULL;
        mask |= 201326592ULL;
    }
    if (flags.HasEnableSchemeBoardCache()) {
        bits |= flags.GetEnableSchemeBoardCache() ? 805306368ULL : 268435456ULL;
        mask |= 805306368ULL;
    }
    if (flags.HasEnableSystemViews()) {
        bits |= flags.GetEnableSystemViews() ? 3221225472ULL : 1073741824ULL;
        mask |= 3221225472ULL;
    }
    if (flags.HasEnableExternalHive()) {
        bits |= flags.GetEnableExternalHive() ? 12884901888ULL : 4294967296ULL;
        mask |= 12884901888ULL;
    }
    if (flags.HasUseSchemeBoardCacheForSchemeRequests()) {
        bits |= flags.GetUseSchemeBoardCacheForSchemeRequests() ? 51539607552ULL : 17179869184ULL;
        mask |= 51539607552ULL;
    }
    if (flags.HasCompileMinikqlWithVersion()) {
        bits |= flags.GetCompileMinikqlWithVersion() ? 206158430208ULL : 68719476736ULL;
        mask |= 206158430208ULL;
    }
    if (flags.HasReadTableWithSnapshot()) {
        bits |= flags.GetReadTableWithSnapshot() ? 824633720832ULL : 274877906944ULL;
        mask |= 824633720832ULL;
    }
    if (flags.HasImportantTabletsUseSystemPool()) {
        bits |= flags.GetImportantTabletsUseSystemPool() ? 3298534883328ULL : 1099511627776ULL;
        mask |= 3298534883328ULL;
    }
    if (flags.HasEnableOfflineSlaves()) {
        bits |= flags.GetEnableOfflineSlaves() ? 13194139533312ULL : 4398046511104ULL;
        mask |= 13194139533312ULL;
    }
    if (flags.HasCheckDatabaseAccessPermission()) {
        bits |= flags.GetCheckDatabaseAccessPermission() ? 52776558133248ULL : 17592186044416ULL;
        mask |= 52776558133248ULL;
    }
    if (flags.HasAllowOnlineIndexBuild()) {
        bits |= flags.GetAllowOnlineIndexBuild() ? 211106232532992ULL : 70368744177664ULL;
        mask |= 211106232532992ULL;
    }
    if (flags.HasEnablePersistentQueryStats()) {
        bits |= flags.GetEnablePersistentQueryStats() ? 844424930131968ULL : 281474976710656ULL;
        mask |= 844424930131968ULL;
    }
    if (flags.HasDisableDataShardBarrier()) {
        bits |= flags.GetDisableDataShardBarrier() ? 3377699720527872ULL : 1125899906842624ULL;
        mask |= 3377699720527872ULL;
    }
    if (flags.HasEnablePutBatchingForBlobStorage()) {
        bits |= flags.GetEnablePutBatchingForBlobStorage() ? 13510798882111488ULL : 4503599627370496ULL;
        mask |= 13510798882111488ULL;
    }
    if (flags.HasEnableKqpWideFlow()) {
        bits |= flags.GetEnableKqpWideFlow() ? 54043195528445952ULL : 18014398509481984ULL;
        mask |= 54043195528445952ULL;
    }
    if (flags.HasEnableKqpScanQueries()) {
        bits |= flags.GetEnableKqpScanQueries() ? 216172782113783808ULL : 72057594037927936ULL;
        mask |= 216172782113783808ULL;
    }
    if (flags.HasEnablePersistentPartitionStats()) {
        bits |= flags.GetEnablePersistentPartitionStats() ? 864691128455135232ULL : 288230376151711744ULL;
        mask |= 864691128455135232ULL;
    }
    if (flags.HasEnableTtlOnIndexedTables()) {
        bits |= flags.GetEnableTtlOnIndexedTables() ? 3458764513820540928ULL : 1152921504606846976ULL;
        mask |= 3458764513820540928ULL;
    }
    if (flags.HasAllowUpdateChannelsBindingOfSolomonPartitions()) {
        bits |= flags.GetAllowUpdateChannelsBindingOfSolomonPartitions() ? 13835058055282163712ULL : 4611686018427387904ULL;
        mask |= 13835058055282163712ULL;
    }
    return { bits, mask };
}

ui64 TRuntimeFeatureFlags::FromProto_slot0(const NKikimrConfig::TFeatureFlags& flags, ui64 value) {
    auto [bits, mask] = BitsFromProto_slot0(flags);
    return (value & ~mask) | bits;
}

void TRuntimeFeatureFlags::Update_slot0(ui64 bits, ui64 mask) {
    ui64 slot = slot0_.load(std::memory_order_relaxed);
    for (;;) {
        ui64 updated = (slot & ~mask) | bits;
        // We perform a CAS so unrelated updates by concurrent threads are not lost
        if (slot0_.compare_exchange_weak(slot, updated, std::memory_order_relaxed)) {
            break;
        }
    }
}

std::tuple<ui64, ui64> TRuntimeFeatureFlags::BitsFromProto_slot1(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 bits = 0;
    ui64 mask = 0;
    if (flags.HasDisableLegacyYql()) {
        bits |= flags.GetDisableLegacyYql() ? 3ULL : 1ULL;
        mask |= 3ULL;
    }
    if (flags.HasEnableDataColumnForIndexTable()) {
        bits |= flags.GetEnableDataColumnForIndexTable() ? 12ULL : 4ULL;
        mask |= 12ULL;
    }
    if (flags.HasAllowServerlessStorageBillingForSchemeShard()) {
        bits |= flags.GetAllowServerlessStorageBillingForSchemeShard() ? 48ULL : 16ULL;
        mask |= 48ULL;
    }
    if (flags.HasEnableGracefulShutdown()) {
        bits |= flags.GetEnableGracefulShutdown() ? 192ULL : 64ULL;
        mask |= 192ULL;
    }
    if (flags.HasEnableDrainOnShutdown()) {
        bits |= flags.GetEnableDrainOnShutdown() ? 768ULL : 256ULL;
        mask |= 768ULL;
    }
    if (flags.HasEnableConfigurationCache()) {
        bits |= flags.GetEnableConfigurationCache() ? 3072ULL : 1024ULL;
        mask |= 3072ULL;
    }
    if (flags.HasEnableDbCounters()) {
        bits |= flags.GetEnableDbCounters() ? 12288ULL : 4096ULL;
        mask |= 12288ULL;
    }
    if (flags.HasEnableClockGettimeForUserCpuAccounting()) {
        bits |= flags.GetEnableClockGettimeForUserCpuAccounting() ? 49152ULL : 16384ULL;
        mask |= 49152ULL;
    }
    if (flags.HasEnableAsyncIndexes()) {
        bits |= flags.GetEnableAsyncIndexes() ? 196608ULL : 65536ULL;
        mask |= 196608ULL;
    }
    if (flags.HasAllowStreamExecuteYqlScript()) {
        bits |= flags.GetAllowStreamExecuteYqlScript() ? 786432ULL : 262144ULL;
        mask |= 786432ULL;
    }
    if (flags.HasEnableKqpScanOverPersistentSnapshot()) {
        bits |= flags.GetEnableKqpScanOverPersistentSnapshot() ? 3145728ULL : 1048576ULL;
        mask |= 3145728ULL;
    }
    if (flags.HasEnableOlapSchemaOperations()) {
        bits |= flags.GetEnableOlapSchemaOperations() ? 12582912ULL : 4194304ULL;
        mask |= 12582912ULL;
    }
    if (flags.HasEnableVPatch()) {
        bits |= flags.GetEnableVPatch() ? 50331648ULL : 16777216ULL;
        mask |= 50331648ULL;
    }
    if (flags.HasEnableMvccSnapshotReads()) {
        bits |= flags.GetEnableMvccSnapshotReads() ? 201326592ULL : 67108864ULL;
        mask |= 201326592ULL;
    }
    if (flags.HasEnableSchemeTransactionsAtSchemeShard()) {
        bits |= flags.GetEnableSchemeTransactionsAtSchemeShard() ? 805306368ULL : 268435456ULL;
        mask |= 805306368ULL;
    }
    if (flags.HasEnableArrowFormatAtDatashard()) {
        bits |= flags.GetEnableArrowFormatAtDatashard() ? 3221225472ULL : 1073741824ULL;
        mask |= 3221225472ULL;
    }
    if (flags.HasEnable3x3RequestsForMirror3DCMinLatencyPut()) {
        bits |= flags.GetEnable3x3RequestsForMirror3DCMinLatencyPut() ? 12884901888ULL : 4294967296ULL;
        mask |= 12884901888ULL;
    }
    if (flags.HasEnableBackgroundCompaction()) {
        bits |= flags.GetEnableBackgroundCompaction() ? 51539607552ULL : 17179869184ULL;
        mask |= 51539607552ULL;
    }
    if (flags.HasEnableArrowFormatInChannels()) {
        bits |= flags.GetEnableArrowFormatInChannels() ? 206158430208ULL : 68719476736ULL;
        mask |= 206158430208ULL;
    }
    if (flags.HasEnableBackgroundCompactionServerless()) {
        bits |= flags.GetEnableBackgroundCompactionServerless() ? 824633720832ULL : 274877906944ULL;
        mask |= 824633720832ULL;
    }
    if (flags.HasEnableNotNullColumns()) {
        bits |= flags.GetEnableNotNullColumns() ? 3298534883328ULL : 1099511627776ULL;
        mask |= 3298534883328ULL;
    }
    if (flags.HasEnableTtlOnAsyncIndexedTables()) {
        bits |= flags.GetEnableTtlOnAsyncIndexedTables() ? 13194139533312ULL : 4398046511104ULL;
        mask |= 13194139533312ULL;
    }
    if (flags.HasEnableBulkUpsertToAsyncIndexedTables()) {
        bits |= flags.GetEnableBulkUpsertToAsyncIndexedTables() ? 52776558133248ULL : 17592186044416ULL;
        mask |= 52776558133248ULL;
    }
    if (flags.HasEnableNodeBrokerSingleDomainMode()) {
        bits |= flags.GetEnableNodeBrokerSingleDomainMode() ? 211106232532992ULL : 70368744177664ULL;
        mask |= 211106232532992ULL;
    }
    if (flags.HasEnablePublicApiExternalBlobs()) {
        bits |= flags.GetEnablePublicApiExternalBlobs() ? 844424930131968ULL : 281474976710656ULL;
        mask |= 844424930131968ULL;
    }
    if (flags.HasEnablePublicApiKeepInMemory()) {
        bits |= flags.GetEnablePublicApiKeepInMemory() ? 3377699720527872ULL : 1125899906842624ULL;
        mask |= 3377699720527872ULL;
    }
    if (flags.HasEnableImplicitScanQueryInScripts()) {
        bits |= flags.GetEnableImplicitScanQueryInScripts() ? 13510798882111488ULL : 4503599627370496ULL;
        mask |= 13510798882111488ULL;
    }
    if (flags.HasAllowVDiskDefrag()) {
        bits |= flags.GetAllowVDiskDefrag() ? 54043195528445952ULL : 18014398509481984ULL;
        mask |= 54043195528445952ULL;
    }
    if (flags.HasEnableAsyncHttpMon()) {
        bits |= flags.GetEnableAsyncHttpMon() ? 216172782113783808ULL : 72057594037927936ULL;
        mask |= 216172782113783808ULL;
    }
    if (flags.HasEnableChangefeeds()) {
        bits |= flags.GetEnableChangefeeds() ? 864691128455135232ULL : 288230376151711744ULL;
        mask |= 864691128455135232ULL;
    }
    if (flags.HasEnableKqpScanQueryMultipleOlapShardsReads()) {
        bits |= flags.GetEnableKqpScanQueryMultipleOlapShardsReads() ? 3458764513820540928ULL : 1152921504606846976ULL;
        mask |= 3458764513820540928ULL;
    }
    if (flags.HasEnableMoveIndex()) {
        bits |= flags.GetEnableMoveIndex() ? 13835058055282163712ULL : 4611686018427387904ULL;
        mask |= 13835058055282163712ULL;
    }
    return { bits, mask };
}

ui64 TRuntimeFeatureFlags::FromProto_slot1(const NKikimrConfig::TFeatureFlags& flags, ui64 value) {
    auto [bits, mask] = BitsFromProto_slot1(flags);
    return (value & ~mask) | bits;
}

void TRuntimeFeatureFlags::Update_slot1(ui64 bits, ui64 mask) {
    ui64 slot = slot1_.load(std::memory_order_relaxed);
    for (;;) {
        ui64 updated = (slot & ~mask) | bits;
        // We perform a CAS so unrelated updates by concurrent threads are not lost
        if (slot1_.compare_exchange_weak(slot, updated, std::memory_order_relaxed)) {
            break;
        }
    }
}

std::tuple<ui64, ui64> TRuntimeFeatureFlags::BitsFromProto_slot2(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 bits = 0;
    ui64 mask = 0;
    if (flags.HasEnableFailureInjectionTermination()) {
        bits |= flags.GetEnableFailureInjectionTermination() ? 3ULL : 1ULL;
        mask |= 3ULL;
    }
    if (flags.HasEnableChunkLocking()) {
        bits |= flags.GetEnableChunkLocking() ? 12ULL : 4ULL;
        mask |= 12ULL;
    }
    if (flags.HasEnableNotNullDataColumns()) {
        bits |= flags.GetEnableNotNullDataColumns() ? 48ULL : 16ULL;
        mask |= 48ULL;
    }
    if (flags.HasEnableGrpcAudit()) {
        bits |= flags.GetEnableGrpcAudit() ? 192ULL : 64ULL;
        mask |= 192ULL;
    }
    if (flags.HasEnableBorrowedSplitCompaction()) {
        bits |= flags.GetEnableBorrowedSplitCompaction() ? 768ULL : 256ULL;
        mask |= 768ULL;
    }
    if (flags.HasEnableChangefeedInitialScan()) {
        bits |= flags.GetEnableChangefeedInitialScan() ? 3072ULL : 1024ULL;
        mask |= 3072ULL;
    }
    if (flags.HasEnableDynamicNodeAuthorization()) {
        bits |= flags.GetEnableDynamicNodeAuthorization() ? 12288ULL : 4096ULL;
        mask |= 12288ULL;
    }
    if (flags.HasEnableDataShardGenericReadSets()) {
        bits |= flags.GetEnableDataShardGenericReadSets() ? 49152ULL : 16384ULL;
        mask |= 49152ULL;
    }
    if (flags.HasEnableAlterDatabaseCreateHiveFirst()) {
        bits |= flags.GetEnableAlterDatabaseCreateHiveFirst() ? 196608ULL : 65536ULL;
        mask |= 196608ULL;
    }
    if (flags.HasEnableSmallDiskOptimization()) {
        bits |= flags.GetEnableSmallDiskOptimization() ? 786432ULL : 262144ULL;
        mask |= 786432ULL;
    }
    if (flags.HasEnableDataShardVolatileTransactions()) {
        bits |= flags.GetEnableDataShardVolatileTransactions() ? 3145728ULL : 1048576ULL;
        mask |= 3145728ULL;
    }
    if (flags.HasEnableTopicServiceTx()) {
        bits |= flags.GetEnableTopicServiceTx() ? 12582912ULL : 4194304ULL;
        mask |= 12582912ULL;
    }
    if (flags.HasEnableLLVMCache()) {
        bits |= flags.GetEnableLLVMCache() ? 50331648ULL : 16777216ULL;
        mask |= 50331648ULL;
    }
    if (flags.HasEnableExternalDataSources()) {
        bits |= flags.GetEnableExternalDataSources() ? 201326592ULL : 67108864ULL;
        mask |= 201326592ULL;
    }
    if (flags.HasEnableTopicDiskSubDomainQuota()) {
        bits |= flags.GetEnableTopicDiskSubDomainQuota() ? 805306368ULL : 268435456ULL;
        mask |= 805306368ULL;
    }
    if (flags.HasEnableSeparationComputeActorsFromRead()) {
        bits |= flags.GetEnableSeparationComputeActorsFromRead() ? 3221225472ULL : 1073741824ULL;
        mask |= 3221225472ULL;
    }
    if (flags.HasEnablePQConfigTransactionsAtSchemeShard()) {
        bits |= flags.GetEnablePQConfigTransactionsAtSchemeShard() ? 12884901888ULL : 4294967296ULL;
        mask |= 12884901888ULL;
    }
    if (flags.HasEnableScriptExecutionOperations()) {
        bits |= flags.GetEnableScriptExecutionOperations() ? 51539607552ULL : 17179869184ULL;
        mask |= 51539607552ULL;
    }
    if (flags.HasEnableImplicitQueryParameterTypes()) {
        bits |= flags.GetEnableImplicitQueryParameterTypes() ? 206158430208ULL : 68719476736ULL;
        mask |= 206158430208ULL;
    }
    if (flags.HasEnableForceImmediateEffectsExecution()) {
        bits |= flags.GetEnableForceImmediateEffectsExecution() ? 824633720832ULL : 274877906944ULL;
        mask |= 824633720832ULL;
    }
    if (flags.HasEnableTopicSplitMerge()) {
        bits |= flags.GetEnableTopicSplitMerge() ? 3298534883328ULL : 1099511627776ULL;
        mask |= 3298534883328ULL;
    }
    if (flags.HasEnableChangefeedDynamoDBStreamsFormat()) {
        bits |= flags.GetEnableChangefeedDynamoDBStreamsFormat() ? 13194139533312ULL : 4398046511104ULL;
        mask |= 13194139533312ULL;
    }
    if (flags.HasForceColumnTablesCompositeMarks()) {
        bits |= flags.GetForceColumnTablesCompositeMarks() ? 52776558133248ULL : 17592186044416ULL;
        mask |= 52776558133248ULL;
    }
    if (flags.HasEnableSubscriptionsInDiscovery()) {
        bits |= flags.GetEnableSubscriptionsInDiscovery() ? 211106232532992ULL : 70368744177664ULL;
        mask |= 211106232532992ULL;
    }
    if (flags.HasEnableGetNodeLabels()) {
        bits |= flags.GetEnableGetNodeLabels() ? 844424930131968ULL : 281474976710656ULL;
        mask |= 844424930131968ULL;
    }
    if (flags.HasEnableTopicMessageMeta()) {
        bits |= flags.GetEnableTopicMessageMeta() ? 3377699720527872ULL : 1125899906842624ULL;
        mask |= 3377699720527872ULL;
    }
    if (flags.HasEnableIcNodeCache()) {
        bits |= flags.GetEnableIcNodeCache() ? 13510798882111488ULL : 4503599627370496ULL;
        mask |= 13510798882111488ULL;
    }
    if (flags.HasEnableTempTables()) {
        bits |= flags.GetEnableTempTables() ? 54043195528445952ULL : 18014398509481984ULL;
        mask |= 54043195528445952ULL;
    }
    if (flags.HasSuppressCompatibilityCheck()) {
        bits |= flags.GetSuppressCompatibilityCheck() ? 216172782113783808ULL : 72057594037927936ULL;
        mask |= 216172782113783808ULL;
    }
    if (flags.HasEnableUniqConstraint()) {
        bits |= flags.GetEnableUniqConstraint() ? 864691128455135232ULL : 288230376151711744ULL;
        mask |= 864691128455135232ULL;
    }
    if (flags.HasEnableChangefeedDebeziumJsonFormat()) {
        bits |= flags.GetEnableChangefeedDebeziumJsonFormat() ? 3458764513820540928ULL : 1152921504606846976ULL;
        mask |= 3458764513820540928ULL;
    }
    if (flags.HasEnableStatistics()) {
        bits |= flags.GetEnableStatistics() ? 13835058055282163712ULL : 4611686018427387904ULL;
        mask |= 13835058055282163712ULL;
    }
    return { bits, mask };
}

ui64 TRuntimeFeatureFlags::FromProto_slot2(const NKikimrConfig::TFeatureFlags& flags, ui64 value) {
    auto [bits, mask] = BitsFromProto_slot2(flags);
    return (value & ~mask) | bits;
}

void TRuntimeFeatureFlags::Update_slot2(ui64 bits, ui64 mask) {
    ui64 slot = slot2_.load(std::memory_order_relaxed);
    for (;;) {
        ui64 updated = (slot & ~mask) | bits;
        // We perform a CAS so unrelated updates by concurrent threads are not lost
        if (slot2_.compare_exchange_weak(slot, updated, std::memory_order_relaxed)) {
            break;
        }
    }
}

std::tuple<ui64, ui64> TRuntimeFeatureFlags::BitsFromProto_slot3(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 bits = 0;
    ui64 mask = 0;
    if (flags.HasEnableUuidAsPrimaryKey()) {
        bits |= flags.GetEnableUuidAsPrimaryKey() ? 3ULL : 1ULL;
        mask |= 3ULL;
    }
    if (flags.HasEnableTablePgTypes()) {
        bits |= flags.GetEnableTablePgTypes() ? 12ULL : 4ULL;
        mask |= 12ULL;
    }
    if (flags.HasEnableLocalDBBtreeIndex()) {
        bits |= flags.GetEnableLocalDBBtreeIndex() ? 48ULL : 16ULL;
        mask |= 48ULL;
    }
    if (flags.HasEnablePDiskHighHDDInFlight()) {
        bits |= flags.GetEnablePDiskHighHDDInFlight() ? 192ULL : 64ULL;
        mask |= 192ULL;
    }
    if (flags.HasEnableViews()) {
        bits |= flags.GetEnableViews() ? 768ULL : 256ULL;
        mask |= 768ULL;
    }
    if (flags.HasEnableServerlessExclusiveDynamicNodes()) {
        bits |= flags.GetEnableServerlessExclusiveDynamicNodes() ? 3072ULL : 1024ULL;
        mask |= 3072ULL;
    }
    if (flags.HasEnableAccessServiceBulkAuthorization()) {
        bits |= flags.GetEnableAccessServiceBulkAuthorization() ? 12288ULL : 4096ULL;
        mask |= 12288ULL;
    }
    if (flags.HasEnableAddColumsWithDefaults()) {
        bits |= flags.GetEnableAddColumsWithDefaults() ? 49152ULL : 16384ULL;
        mask |= 49152ULL;
    }
    if (flags.HasEnableReplaceIfExistsForExternalEntities()) {
        bits |= flags.GetEnableReplaceIfExistsForExternalEntities() ? 196608ULL : 65536ULL;
        mask |= 196608ULL;
    }
    if (flags.HasEnableCMSRequestPriorities()) {
        bits |= flags.GetEnableCMSRequestPriorities() ? 786432ULL : 262144ULL;
        mask |= 786432ULL;
    }
    if (flags.HasEnableKeyvalueLogBatching()) {
        bits |= flags.GetEnableKeyvalueLogBatching() ? 3145728ULL : 1048576ULL;
        mask |= 3145728ULL;
    }
    if (flags.HasEnableLocalDBFlatIndex()) {
        bits |= flags.GetEnableLocalDBFlatIndex() ? 12582912ULL : 4194304ULL;
        mask |= 12582912ULL;
    }
    if (flags.HasExtendedVDiskCounters()) {
        bits |= flags.GetExtendedVDiskCounters() ? 50331648ULL : 16777216ULL;
        mask |= 50331648ULL;
    }
    if (flags.HasExtendedPDiskSensors()) {
        bits |= flags.GetExtendedPDiskSensors() ? 201326592ULL : 67108864ULL;
        mask |= 201326592ULL;
    }
    if (flags.HasEnableStableNodeNames()) {
        bits |= flags.GetEnableStableNodeNames() ? 805306368ULL : 268435456ULL;
        mask |= 805306368ULL;
    }
    if (flags.HasEnableBackupService()) {
        bits |= flags.GetEnableBackupService() ? 3221225472ULL : 1073741824ULL;
        mask |= 3221225472ULL;
    }
    if (flags.HasEnableVolatileTransactionArbiters()) {
        bits |= flags.GetEnableVolatileTransactionArbiters() ? 12884901888ULL : 4294967296ULL;
        mask |= 12884901888ULL;
    }
    if (flags.HasEnableGraphShard()) {
        bits |= flags.GetEnableGraphShard() ? 51539607552ULL : 17179869184ULL;
        mask |= 51539607552ULL;
    }
    if (flags.HasEnableExternalSourceSchemaInference()) {
        bits |= flags.GetEnableExternalSourceSchemaInference() ? 206158430208ULL : 68719476736ULL;
        mask |= 206158430208ULL;
    }
    if (flags.HasEnableDbMetadataCache()) {
        bits |= flags.GetEnableDbMetadataCache() ? 824633720832ULL : 274877906944ULL;
        mask |= 824633720832ULL;
    }
    if (flags.HasEnableTableDatetime64()) {
        bits |= flags.GetEnableTableDatetime64() ? 3298534883328ULL : 1099511627776ULL;
        mask |= 3298534883328ULL;
    }
    if (flags.HasEnableResourcePools()) {
        bits |= flags.GetEnableResourcePools() ? 13194139533312ULL : 4398046511104ULL;
        mask |= 13194139533312ULL;
    }
    if (flags.HasEnableColumnStatistics()) {
        bits |= flags.GetEnableColumnStatistics() ? 52776558133248ULL : 17592186044416ULL;
        mask |= 52776558133248ULL;
    }
    if (flags.HasEnableSingleCompositeActionGroup()) {
        bits |= flags.GetEnableSingleCompositeActionGroup() ? 211106232532992ULL : 70368744177664ULL;
        mask |= 211106232532992ULL;
    }
    if (flags.HasEnableResourcePoolsOnServerless()) {
        bits |= flags.GetEnableResourcePoolsOnServerless() ? 844424930131968ULL : 281474976710656ULL;
        mask |= 844424930131968ULL;
    }
    if (flags.HasEnableVectorIndex()) {
        bits |= flags.GetEnableVectorIndex() ? 3377699720527872ULL : 1125899906842624ULL;
        mask |= 3377699720527872ULL;
    }
    if (flags.HasEnableChangefeedsOnIndexTables()) {
        bits |= flags.GetEnableChangefeedsOnIndexTables() ? 13510798882111488ULL : 4503599627370496ULL;
        mask |= 13510798882111488ULL;
    }
    if (flags.HasEnableResourcePoolsCounters()) {
        bits |= flags.GetEnableResourcePoolsCounters() ? 54043195528445952ULL : 18014398509481984ULL;
        mask |= 54043195528445952ULL;
    }
    if (flags.HasEnableOptionalColumnsInColumnShard()) {
        bits |= flags.GetEnableOptionalColumnsInColumnShard() ? 216172782113783808ULL : 72057594037927936ULL;
        mask |= 216172782113783808ULL;
    }
    if (flags.HasEnableGranularTimecast()) {
        bits |= flags.GetEnableGranularTimecast() ? 864691128455135232ULL : 288230376151711744ULL;
        mask |= 864691128455135232ULL;
    }
    if (flags.HasEnableAlterShardingInColumnShard()) {
        bits |= flags.GetEnableAlterShardingInColumnShard() ? 3458764513820540928ULL : 1152921504606846976ULL;
        mask |= 3458764513820540928ULL;
    }
    if (flags.HasEnablePgSyntax()) {
        bits |= flags.GetEnablePgSyntax() ? 13835058055282163712ULL : 4611686018427387904ULL;
        mask |= 13835058055282163712ULL;
    }
    return { bits, mask };
}

ui64 TRuntimeFeatureFlags::FromProto_slot3(const NKikimrConfig::TFeatureFlags& flags, ui64 value) {
    auto [bits, mask] = BitsFromProto_slot3(flags);
    return (value & ~mask) | bits;
}

void TRuntimeFeatureFlags::Update_slot3(ui64 bits, ui64 mask) {
    ui64 slot = slot3_.load(std::memory_order_relaxed);
    for (;;) {
        ui64 updated = (slot & ~mask) | bits;
        // We perform a CAS so unrelated updates by concurrent threads are not lost
        if (slot3_.compare_exchange_weak(slot, updated, std::memory_order_relaxed)) {
            break;
        }
    }
}

std::tuple<ui64, ui64> TRuntimeFeatureFlags::BitsFromProto_slot4(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 bits = 0;
    ui64 mask = 0;
    if (flags.HasEnableTieringInColumnShard()) {
        bits |= flags.GetEnableTieringInColumnShard() ? 3ULL : 1ULL;
        mask |= 3ULL;
    }
    if (flags.HasEnableMetadataObjectsOnServerless()) {
        bits |= flags.GetEnableMetadataObjectsOnServerless() ? 12ULL : 4ULL;
        mask |= 12ULL;
    }
    if (flags.HasEnableOlapCompression()) {
        bits |= flags.GetEnableOlapCompression() ? 48ULL : 16ULL;
        mask |= 48ULL;
    }
    if (flags.HasEnableExternalDataSourcesOnServerless()) {
        bits |= flags.GetEnableExternalDataSourcesOnServerless() ? 192ULL : 64ULL;
        mask |= 192ULL;
    }
    if (flags.HasEnableSparsedColumns()) {
        bits |= flags.GetEnableSparsedColumns() ? 768ULL : 256ULL;
        mask |= 768ULL;
    }
    if (flags.HasEnableParameterizedDecimal()) {
        bits |= flags.GetEnableParameterizedDecimal() ? 3072ULL : 1024ULL;
        mask |= 3072ULL;
    }
    if (flags.HasEnableImmediateWritingOnBulkUpsert()) {
        bits |= flags.GetEnableImmediateWritingOnBulkUpsert() ? 12288ULL : 4096ULL;
        mask |= 12288ULL;
    }
    if (flags.HasEnableInsertWriteIdSpecialColumnCompatibility()) {
        bits |= flags.GetEnableInsertWriteIdSpecialColumnCompatibility() ? 49152ULL : 16384ULL;
        mask |= 49152ULL;
    }
    if (flags.HasEnableTopicAutopartitioningForCDC()) {
        bits |= flags.GetEnableTopicAutopartitioningForCDC() ? 196608ULL : 65536ULL;
        mask |= 196608ULL;
    }
    if (flags.HasEnableWritePortionsOnInsert()) {
        bits |= flags.GetEnableWritePortionsOnInsert() ? 786432ULL : 262144ULL;
        mask |= 786432ULL;
    }
    return { bits, mask };
}

ui64 TRuntimeFeatureFlags::FromProto_slot4(const NKikimrConfig::TFeatureFlags& flags, ui64 value) {
    auto [bits, mask] = BitsFromProto_slot4(flags);
    return (value & ~mask) | bits;
}

void TRuntimeFeatureFlags::Update_slot4(ui64 bits, ui64 mask) {
    ui64 slot = slot4_.load(std::memory_order_relaxed);
    for (;;) {
        ui64 updated = (slot & ~mask) | bits;
        // We perform a CAS so unrelated updates by concurrent threads are not lost
        if (slot4_.compare_exchange_weak(slot, updated, std::memory_order_relaxed)) {
            break;
        }
    }
}


TRuntimeFeatureFlags::TRuntimeFeatureFlags()
    : slot0_{ 2495709609129058474ULL }
    , slot1_{ 9989170925560005258ULL }
    , slot2_{ 9811100758805318176ULL }
    , slot3_{ 9799843793041096738ULL }
    , slot4_{ 136ULL }
{}

TRuntimeFeatureFlags::TRuntimeFeatureFlags(const TRuntimeFeatureFlags& flags)
    : slot0_{ flags.slot0_.load(std::memory_order_relaxed) }
    , slot1_{ flags.slot1_.load(std::memory_order_relaxed) }
    , slot2_{ flags.slot2_.load(std::memory_order_relaxed) }
    , slot3_{ flags.slot3_.load(std::memory_order_relaxed) }
    , slot4_{ flags.slot4_.load(std::memory_order_relaxed) }
{}

TRuntimeFeatureFlags& TRuntimeFeatureFlags::operator=(const TRuntimeFeatureFlags& flags) {
    slot0_.store(
        flags.slot0_.load(std::memory_order_relaxed),
        std::memory_order_relaxed);
    slot1_.store(
        flags.slot1_.load(std::memory_order_relaxed),
        std::memory_order_relaxed);
    slot2_.store(
        flags.slot2_.load(std::memory_order_relaxed),
        std::memory_order_relaxed);
    slot3_.store(
        flags.slot3_.load(std::memory_order_relaxed),
        std::memory_order_relaxed);
    slot4_.store(
        flags.slot4_.load(std::memory_order_relaxed),
        std::memory_order_relaxed);
    return *this;
}

TRuntimeFeatureFlags::TRuntimeFeatureFlags(const NKikimrConfig::TFeatureFlags& flags)
    : slot0_{ FromProto_slot0(flags, 2495709609129058474ULL) }
    , slot1_{ FromProto_slot1(flags, 9989170925560005258ULL) }
    , slot2_{ FromProto_slot2(flags, 9811100758805318176ULL) }
    , slot3_{ FromProto_slot3(flags, 9799843793041096738ULL) }
    , slot4_{ FromProto_slot4(flags, 136ULL) }
{}

TRuntimeFeatureFlags& TRuntimeFeatureFlags::operator=(const NKikimrConfig::TFeatureFlags& flags) {
    CopyFrom(flags);
    return *this;
}

void TRuntimeFeatureFlags::CopyFrom(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 slot0 = FromProto_slot0(flags, 2495709609129058474ULL);
    ui64 slot1 = FromProto_slot1(flags, 9989170925560005258ULL);
    ui64 slot2 = FromProto_slot2(flags, 9811100758805318176ULL);
    ui64 slot3 = FromProto_slot3(flags, 9799843793041096738ULL);
    ui64 slot4 = FromProto_slot4(flags, 136ULL);
    slot0_.store(slot0, std::memory_order_relaxed);
    slot1_.store(slot1, std::memory_order_relaxed);
    slot2_.store(slot2, std::memory_order_relaxed);
    slot3_.store(slot3, std::memory_order_relaxed);
    slot4_.store(slot4, std::memory_order_relaxed);
}

void TRuntimeFeatureFlags::MergeFrom(const NKikimrConfig::TFeatureFlags& flags) {
    auto [slot0_bits, slot0_mask] = BitsFromProto_slot0(flags);
    auto [slot1_bits, slot1_mask] = BitsFromProto_slot1(flags);
    auto [slot2_bits, slot2_mask] = BitsFromProto_slot2(flags);
    auto [slot3_bits, slot3_mask] = BitsFromProto_slot3(flags);
    auto [slot4_bits, slot4_mask] = BitsFromProto_slot4(flags);
    Update_slot0(slot0_bits, slot0_mask);
    Update_slot1(slot1_bits, slot1_mask);
    Update_slot2(slot2_bits, slot2_mask);
    Update_slot3(slot3_bits, slot3_mask);
    Update_slot4(slot4_bits, slot4_mask);
}

void TRuntimeFeatureFlags::CopyRuntimeFrom(const NKikimrConfig::TFeatureFlags& flags) {
    ui64 slot0 = FromProto_slot0(flags, 2495709609129058474ULL);
    ui64 slot1 = FromProto_slot1(flags, 9989170925560005258ULL);
    ui64 slot2 = FromProto_slot2(flags, 9811100758805318176ULL);
    ui64 slot3 = FromProto_slot3(flags, 9799843793041096738ULL);
    ui64 slot4 = FromProto_slot4(flags, 136ULL);
    Update_slot0(slot0 & 18445896347022524415ULL, 18445896347022524415ULL);
    Update_slot1(slot1 & 18446744073709536255ULL, 18446744073709536255ULL);
    Update_slot2(slot2 & 18216849385675816959ULL, 18216849385675816959ULL);
    Update_slot3(slot3 & 18446744073457893375ULL, 18446744073457893375ULL);
    Update_slot4(slot4 & 1048575ULL, 1048575ULL);
}

TRuntimeFeatureFlags::operator NKikimrConfig::TFeatureFlags() const {
    NKikimrConfig::TFeatureFlags flags;
    ui64 slot0 = slot0_.load(std::memory_order_relaxed);
    ui64 slot1 = slot1_.load(std::memory_order_relaxed);
    ui64 slot2 = slot2_.load(std::memory_order_relaxed);
    ui64 slot3 = slot3_.load(std::memory_order_relaxed);
    ui64 slot4 = slot4_.load(std::memory_order_relaxed);
    if (slot0 & 1ULL) {
        flags.SetEnableSeparateSolomonShardForPDisk(bool(slot0 & 2ULL));
    }
    if (slot0 & 4ULL) {
        flags.SetUseForsetiSchedulerByDefaultForPDisk(bool(slot0 & 8ULL));
    }
    if (slot0 & 16ULL) {
        flags.SetEnableSeparateTrimThreadForPDisk(bool(slot0 & 32ULL));
    }
    if (slot0 & 64ULL) {
        flags.SetEnableSeparateSubmitThreadForPDisk(bool(slot0 & 128ULL));
    }
    if (slot0 & 256ULL) {
        flags.SetEnablePerOwnerChunkLimitForPDisk(bool(slot0 & 512ULL));
    }
    if (slot0 & 1024ULL) {
        flags.SetTrimEntireDeviceOnStartup(bool(slot0 & 2048ULL));
    }
    if (slot0 & 4096ULL) {
        flags.SetEnableChunkGraceForPDisk(bool(slot0 & 8192ULL));
    }
    if (slot0 & 16384ULL) {
        flags.SetAllowConsistentOperationsForSchemeShard(bool(slot0 & 32768ULL));
    }
    if (slot0 & 65536ULL) {
        flags.SetEnableSchemeBoard(bool(slot0 & 131072ULL));
    }
    if (slot0 & 262144ULL) {
        flags.SetAllowYdbRequestsWithoutDatabase(bool(slot0 & 524288ULL));
    }
    if (slot0 & 1048576ULL) {
        flags.SetEnableExternalSubdomains(bool(slot0 & 2097152ULL));
    }
    if (slot0 & 4194304ULL) {
        flags.SetAllowRecursiveMkDir(bool(slot0 & 8388608ULL));
    }
    if (slot0 & 16777216ULL) {
        flags.SetAllowHugeKeyValueDeletes(bool(slot0 & 33554432ULL));
    }
    if (slot0 & 67108864ULL) {
        flags.SetSendSchemaVersionToDatashard(bool(slot0 & 134217728ULL));
    }
    if (slot0 & 268435456ULL) {
        flags.SetEnableSchemeBoardCache(bool(slot0 & 536870912ULL));
    }
    if (slot0 & 1073741824ULL) {
        flags.SetEnableSystemViews(bool(slot0 & 2147483648ULL));
    }
    if (slot0 & 4294967296ULL) {
        flags.SetEnableExternalHive(bool(slot0 & 8589934592ULL));
    }
    if (slot0 & 17179869184ULL) {
        flags.SetUseSchemeBoardCacheForSchemeRequests(bool(slot0 & 34359738368ULL));
    }
    if (slot0 & 68719476736ULL) {
        flags.SetCompileMinikqlWithVersion(bool(slot0 & 137438953472ULL));
    }
    if (slot0 & 274877906944ULL) {
        flags.SetReadTableWithSnapshot(bool(slot0 & 549755813888ULL));
    }
    if (slot0 & 1099511627776ULL) {
        flags.SetImportantTabletsUseSystemPool(bool(slot0 & 2199023255552ULL));
    }
    if (slot0 & 4398046511104ULL) {
        flags.SetEnableOfflineSlaves(bool(slot0 & 8796093022208ULL));
    }
    if (slot0 & 17592186044416ULL) {
        flags.SetCheckDatabaseAccessPermission(bool(slot0 & 35184372088832ULL));
    }
    if (slot0 & 70368744177664ULL) {
        flags.SetAllowOnlineIndexBuild(bool(slot0 & 140737488355328ULL));
    }
    if (slot0 & 281474976710656ULL) {
        flags.SetEnablePersistentQueryStats(bool(slot0 & 562949953421312ULL));
    }
    if (slot0 & 1125899906842624ULL) {
        flags.SetDisableDataShardBarrier(bool(slot0 & 2251799813685248ULL));
    }
    if (slot0 & 4503599627370496ULL) {
        flags.SetEnablePutBatchingForBlobStorage(bool(slot0 & 9007199254740992ULL));
    }
    if (slot0 & 18014398509481984ULL) {
        flags.SetEnableKqpWideFlow(bool(slot0 & 36028797018963968ULL));
    }
    if (slot0 & 72057594037927936ULL) {
        flags.SetEnableKqpScanQueries(bool(slot0 & 144115188075855872ULL));
    }
    if (slot0 & 288230376151711744ULL) {
        flags.SetEnablePersistentPartitionStats(bool(slot0 & 576460752303423488ULL));
    }
    if (slot0 & 1152921504606846976ULL) {
        flags.SetEnableTtlOnIndexedTables(bool(slot0 & 2305843009213693952ULL));
    }
    if (slot0 & 4611686018427387904ULL) {
        flags.SetAllowUpdateChannelsBindingOfSolomonPartitions(bool(slot0 & 9223372036854775808ULL));
    }
    if (slot1 & 1ULL) {
        flags.SetDisableLegacyYql(bool(slot1 & 2ULL));
    }
    if (slot1 & 4ULL) {
        flags.SetEnableDataColumnForIndexTable(bool(slot1 & 8ULL));
    }
    if (slot1 & 16ULL) {
        flags.SetAllowServerlessStorageBillingForSchemeShard(bool(slot1 & 32ULL));
    }
    if (slot1 & 64ULL) {
        flags.SetEnableGracefulShutdown(bool(slot1 & 128ULL));
    }
    if (slot1 & 256ULL) {
        flags.SetEnableDrainOnShutdown(bool(slot1 & 512ULL));
    }
    if (slot1 & 1024ULL) {
        flags.SetEnableConfigurationCache(bool(slot1 & 2048ULL));
    }
    if (slot1 & 4096ULL) {
        flags.SetEnableDbCounters(bool(slot1 & 8192ULL));
    }
    if (slot1 & 16384ULL) {
        flags.SetEnableClockGettimeForUserCpuAccounting(bool(slot1 & 32768ULL));
    }
    if (slot1 & 65536ULL) {
        flags.SetEnableAsyncIndexes(bool(slot1 & 131072ULL));
    }
    if (slot1 & 262144ULL) {
        flags.SetAllowStreamExecuteYqlScript(bool(slot1 & 524288ULL));
    }
    if (slot1 & 1048576ULL) {
        flags.SetEnableKqpScanOverPersistentSnapshot(bool(slot1 & 2097152ULL));
    }
    if (slot1 & 4194304ULL) {
        flags.SetEnableOlapSchemaOperations(bool(slot1 & 8388608ULL));
    }
    if (slot1 & 16777216ULL) {
        flags.SetEnableVPatch(bool(slot1 & 33554432ULL));
    }
    if (slot1 & 67108864ULL) {
        flags.SetEnableMvccSnapshotReads(bool(slot1 & 134217728ULL));
    }
    if (slot1 & 268435456ULL) {
        flags.SetEnableSchemeTransactionsAtSchemeShard(bool(slot1 & 536870912ULL));
    }
    if (slot1 & 1073741824ULL) {
        flags.SetEnableArrowFormatAtDatashard(bool(slot1 & 2147483648ULL));
    }
    if (slot1 & 4294967296ULL) {
        flags.SetEnable3x3RequestsForMirror3DCMinLatencyPut(bool(slot1 & 8589934592ULL));
    }
    if (slot1 & 17179869184ULL) {
        flags.SetEnableBackgroundCompaction(bool(slot1 & 34359738368ULL));
    }
    if (slot1 & 68719476736ULL) {
        flags.SetEnableArrowFormatInChannels(bool(slot1 & 137438953472ULL));
    }
    if (slot1 & 274877906944ULL) {
        flags.SetEnableBackgroundCompactionServerless(bool(slot1 & 549755813888ULL));
    }
    if (slot1 & 1099511627776ULL) {
        flags.SetEnableNotNullColumns(bool(slot1 & 2199023255552ULL));
    }
    if (slot1 & 4398046511104ULL) {
        flags.SetEnableTtlOnAsyncIndexedTables(bool(slot1 & 8796093022208ULL));
    }
    if (slot1 & 17592186044416ULL) {
        flags.SetEnableBulkUpsertToAsyncIndexedTables(bool(slot1 & 35184372088832ULL));
    }
    if (slot1 & 70368744177664ULL) {
        flags.SetEnableNodeBrokerSingleDomainMode(bool(slot1 & 140737488355328ULL));
    }
    if (slot1 & 281474976710656ULL) {
        flags.SetEnablePublicApiExternalBlobs(bool(slot1 & 562949953421312ULL));
    }
    if (slot1 & 1125899906842624ULL) {
        flags.SetEnablePublicApiKeepInMemory(bool(slot1 & 2251799813685248ULL));
    }
    if (slot1 & 4503599627370496ULL) {
        flags.SetEnableImplicitScanQueryInScripts(bool(slot1 & 9007199254740992ULL));
    }
    if (slot1 & 18014398509481984ULL) {
        flags.SetAllowVDiskDefrag(bool(slot1 & 36028797018963968ULL));
    }
    if (slot1 & 72057594037927936ULL) {
        flags.SetEnableAsyncHttpMon(bool(slot1 & 144115188075855872ULL));
    }
    if (slot1 & 288230376151711744ULL) {
        flags.SetEnableChangefeeds(bool(slot1 & 576460752303423488ULL));
    }
    if (slot1 & 1152921504606846976ULL) {
        flags.SetEnableKqpScanQueryMultipleOlapShardsReads(bool(slot1 & 2305843009213693952ULL));
    }
    if (slot1 & 4611686018427387904ULL) {
        flags.SetEnableMoveIndex(bool(slot1 & 9223372036854775808ULL));
    }
    if (slot2 & 1ULL) {
        flags.SetEnableFailureInjectionTermination(bool(slot2 & 2ULL));
    }
    if (slot2 & 4ULL) {
        flags.SetEnableChunkLocking(bool(slot2 & 8ULL));
    }
    if (slot2 & 16ULL) {
        flags.SetEnableNotNullDataColumns(bool(slot2 & 32ULL));
    }
    if (slot2 & 64ULL) {
        flags.SetEnableGrpcAudit(bool(slot2 & 128ULL));
    }
    if (slot2 & 256ULL) {
        flags.SetEnableBorrowedSplitCompaction(bool(slot2 & 512ULL));
    }
    if (slot2 & 1024ULL) {
        flags.SetEnableChangefeedInitialScan(bool(slot2 & 2048ULL));
    }
    if (slot2 & 4096ULL) {
        flags.SetEnableDynamicNodeAuthorization(bool(slot2 & 8192ULL));
    }
    if (slot2 & 16384ULL) {
        flags.SetEnableDataShardGenericReadSets(bool(slot2 & 32768ULL));
    }
    if (slot2 & 65536ULL) {
        flags.SetEnableAlterDatabaseCreateHiveFirst(bool(slot2 & 131072ULL));
    }
    if (slot2 & 262144ULL) {
        flags.SetEnableSmallDiskOptimization(bool(slot2 & 524288ULL));
    }
    if (slot2 & 1048576ULL) {
        flags.SetEnableDataShardVolatileTransactions(bool(slot2 & 2097152ULL));
    }
    if (slot2 & 4194304ULL) {
        flags.SetEnableTopicServiceTx(bool(slot2 & 8388608ULL));
    }
    if (slot2 & 16777216ULL) {
        flags.SetEnableLLVMCache(bool(slot2 & 33554432ULL));
    }
    if (slot2 & 67108864ULL) {
        flags.SetEnableExternalDataSources(bool(slot2 & 134217728ULL));
    }
    if (slot2 & 268435456ULL) {
        flags.SetEnableTopicDiskSubDomainQuota(bool(slot2 & 536870912ULL));
    }
    if (slot2 & 1073741824ULL) {
        flags.SetEnableSeparationComputeActorsFromRead(bool(slot2 & 2147483648ULL));
    }
    if (slot2 & 4294967296ULL) {
        flags.SetEnablePQConfigTransactionsAtSchemeShard(bool(slot2 & 8589934592ULL));
    }
    if (slot2 & 17179869184ULL) {
        flags.SetEnableScriptExecutionOperations(bool(slot2 & 34359738368ULL));
    }
    if (slot2 & 68719476736ULL) {
        flags.SetEnableImplicitQueryParameterTypes(bool(slot2 & 137438953472ULL));
    }
    if (slot2 & 274877906944ULL) {
        flags.SetEnableForceImmediateEffectsExecution(bool(slot2 & 549755813888ULL));
    }
    if (slot2 & 1099511627776ULL) {
        flags.SetEnableTopicSplitMerge(bool(slot2 & 2199023255552ULL));
    }
    if (slot2 & 4398046511104ULL) {
        flags.SetEnableChangefeedDynamoDBStreamsFormat(bool(slot2 & 8796093022208ULL));
    }
    if (slot2 & 17592186044416ULL) {
        flags.SetForceColumnTablesCompositeMarks(bool(slot2 & 35184372088832ULL));
    }
    if (slot2 & 70368744177664ULL) {
        flags.SetEnableSubscriptionsInDiscovery(bool(slot2 & 140737488355328ULL));
    }
    if (slot2 & 281474976710656ULL) {
        flags.SetEnableGetNodeLabels(bool(slot2 & 562949953421312ULL));
    }
    if (slot2 & 1125899906842624ULL) {
        flags.SetEnableTopicMessageMeta(bool(slot2 & 2251799813685248ULL));
    }
    if (slot2 & 4503599627370496ULL) {
        flags.SetEnableIcNodeCache(bool(slot2 & 9007199254740992ULL));
    }
    if (slot2 & 18014398509481984ULL) {
        flags.SetEnableTempTables(bool(slot2 & 36028797018963968ULL));
    }
    if (slot2 & 72057594037927936ULL) {
        flags.SetSuppressCompatibilityCheck(bool(slot2 & 144115188075855872ULL));
    }
    if (slot2 & 288230376151711744ULL) {
        flags.SetEnableUniqConstraint(bool(slot2 & 576460752303423488ULL));
    }
    if (slot2 & 1152921504606846976ULL) {
        flags.SetEnableChangefeedDebeziumJsonFormat(bool(slot2 & 2305843009213693952ULL));
    }
    if (slot2 & 4611686018427387904ULL) {
        flags.SetEnableStatistics(bool(slot2 & 9223372036854775808ULL));
    }
    if (slot3 & 1ULL) {
        flags.SetEnableUuidAsPrimaryKey(bool(slot3 & 2ULL));
    }
    if (slot3 & 4ULL) {
        flags.SetEnableTablePgTypes(bool(slot3 & 8ULL));
    }
    if (slot3 & 16ULL) {
        flags.SetEnableLocalDBBtreeIndex(bool(slot3 & 32ULL));
    }
    if (slot3 & 64ULL) {
        flags.SetEnablePDiskHighHDDInFlight(bool(slot3 & 128ULL));
    }
    if (slot3 & 256ULL) {
        flags.SetEnableViews(bool(slot3 & 512ULL));
    }
    if (slot3 & 1024ULL) {
        flags.SetEnableServerlessExclusiveDynamicNodes(bool(slot3 & 2048ULL));
    }
    if (slot3 & 4096ULL) {
        flags.SetEnableAccessServiceBulkAuthorization(bool(slot3 & 8192ULL));
    }
    if (slot3 & 16384ULL) {
        flags.SetEnableAddColumsWithDefaults(bool(slot3 & 32768ULL));
    }
    if (slot3 & 65536ULL) {
        flags.SetEnableReplaceIfExistsForExternalEntities(bool(slot3 & 131072ULL));
    }
    if (slot3 & 262144ULL) {
        flags.SetEnableCMSRequestPriorities(bool(slot3 & 524288ULL));
    }
    if (slot3 & 1048576ULL) {
        flags.SetEnableKeyvalueLogBatching(bool(slot3 & 2097152ULL));
    }
    if (slot3 & 4194304ULL) {
        flags.SetEnableLocalDBFlatIndex(bool(slot3 & 8388608ULL));
    }
    if (slot3 & 16777216ULL) {
        flags.SetExtendedVDiskCounters(bool(slot3 & 33554432ULL));
    }
    if (slot3 & 67108864ULL) {
        flags.SetExtendedPDiskSensors(bool(slot3 & 134217728ULL));
    }
    if (slot3 & 268435456ULL) {
        flags.SetEnableStableNodeNames(bool(slot3 & 536870912ULL));
    }
    if (slot3 & 1073741824ULL) {
        flags.SetEnableBackupService(bool(slot3 & 2147483648ULL));
    }
    if (slot3 & 4294967296ULL) {
        flags.SetEnableVolatileTransactionArbiters(bool(slot3 & 8589934592ULL));
    }
    if (slot3 & 17179869184ULL) {
        flags.SetEnableGraphShard(bool(slot3 & 34359738368ULL));
    }
    if (slot3 & 68719476736ULL) {
        flags.SetEnableExternalSourceSchemaInference(bool(slot3 & 137438953472ULL));
    }
    if (slot3 & 274877906944ULL) {
        flags.SetEnableDbMetadataCache(bool(slot3 & 549755813888ULL));
    }
    if (slot3 & 1099511627776ULL) {
        flags.SetEnableTableDatetime64(bool(slot3 & 2199023255552ULL));
    }
    if (slot3 & 4398046511104ULL) {
        flags.SetEnableResourcePools(bool(slot3 & 8796093022208ULL));
    }
    if (slot3 & 17592186044416ULL) {
        flags.SetEnableColumnStatistics(bool(slot3 & 35184372088832ULL));
    }
    if (slot3 & 70368744177664ULL) {
        flags.SetEnableSingleCompositeActionGroup(bool(slot3 & 140737488355328ULL));
    }
    if (slot3 & 281474976710656ULL) {
        flags.SetEnableResourcePoolsOnServerless(bool(slot3 & 562949953421312ULL));
    }
    if (slot3 & 1125899906842624ULL) {
        flags.SetEnableVectorIndex(bool(slot3 & 2251799813685248ULL));
    }
    if (slot3 & 4503599627370496ULL) {
        flags.SetEnableChangefeedsOnIndexTables(bool(slot3 & 9007199254740992ULL));
    }
    if (slot3 & 18014398509481984ULL) {
        flags.SetEnableResourcePoolsCounters(bool(slot3 & 36028797018963968ULL));
    }
    if (slot3 & 72057594037927936ULL) {
        flags.SetEnableOptionalColumnsInColumnShard(bool(slot3 & 144115188075855872ULL));
    }
    if (slot3 & 288230376151711744ULL) {
        flags.SetEnableGranularTimecast(bool(slot3 & 576460752303423488ULL));
    }
    if (slot3 & 1152921504606846976ULL) {
        flags.SetEnableAlterShardingInColumnShard(bool(slot3 & 2305843009213693952ULL));
    }
    if (slot3 & 4611686018427387904ULL) {
        flags.SetEnablePgSyntax(bool(slot3 & 9223372036854775808ULL));
    }
    if (slot4 & 1ULL) {
        flags.SetEnableTieringInColumnShard(bool(slot4 & 2ULL));
    }
    if (slot4 & 4ULL) {
        flags.SetEnableMetadataObjectsOnServerless(bool(slot4 & 8ULL));
    }
    if (slot4 & 16ULL) {
        flags.SetEnableOlapCompression(bool(slot4 & 32ULL));
    }
    if (slot4 & 64ULL) {
        flags.SetEnableExternalDataSourcesOnServerless(bool(slot4 & 128ULL));
    }
    if (slot4 & 256ULL) {
        flags.SetEnableSparsedColumns(bool(slot4 & 512ULL));
    }
    if (slot4 & 1024ULL) {
        flags.SetEnableParameterizedDecimal(bool(slot4 & 2048ULL));
    }
    if (slot4 & 4096ULL) {
        flags.SetEnableImmediateWritingOnBulkUpsert(bool(slot4 & 8192ULL));
    }
    if (slot4 & 16384ULL) {
        flags.SetEnableInsertWriteIdSpecialColumnCompatibility(bool(slot4 & 32768ULL));
    }
    if (slot4 & 65536ULL) {
        flags.SetEnableTopicAutopartitioningForCDC(bool(slot4 & 131072ULL));
    }
    if (slot4 & 262144ULL) {
        flags.SetEnableWritePortionsOnInsert(bool(slot4 & 524288ULL));
    }
    return flags;
}


bool TRuntimeFeatureFlags::HasEnableSeparateSolomonShardForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 1ULL;
}

bool TRuntimeFeatureFlags::GetEnableSeparateSolomonShardForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 2ULL;
}

void TRuntimeFeatureFlags::SetEnableSeparateSolomonShardForPDisk(bool value) {
    Update_slot0(value ? 3ULL : 1ULL, 3ULL);
}

void TRuntimeFeatureFlags::ClearEnableSeparateSolomonShardForPDisk() {
    Update_slot0(2ULL, 3ULL);
}

bool TRuntimeFeatureFlags::HasUseForsetiSchedulerByDefaultForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 4ULL;
}

bool TRuntimeFeatureFlags::GetUseForsetiSchedulerByDefaultForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 8ULL;
}

void TRuntimeFeatureFlags::SetUseForsetiSchedulerByDefaultForPDisk(bool value) {
    Update_slot0(value ? 12ULL : 4ULL, 12ULL);
}

void TRuntimeFeatureFlags::ClearUseForsetiSchedulerByDefaultForPDisk() {
    Update_slot0(8ULL, 12ULL);
}

bool TRuntimeFeatureFlags::HasEnableSeparateTrimThreadForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 16ULL;
}

bool TRuntimeFeatureFlags::GetEnableSeparateTrimThreadForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 32ULL;
}

void TRuntimeFeatureFlags::SetEnableSeparateTrimThreadForPDisk(bool value) {
    Update_slot0(value ? 48ULL : 16ULL, 48ULL);
}

void TRuntimeFeatureFlags::ClearEnableSeparateTrimThreadForPDisk() {
    Update_slot0(32ULL, 48ULL);
}

bool TRuntimeFeatureFlags::HasEnableSeparateSubmitThreadForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 64ULL;
}

bool TRuntimeFeatureFlags::GetEnableSeparateSubmitThreadForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 128ULL;
}

void TRuntimeFeatureFlags::SetEnableSeparateSubmitThreadForPDisk(bool value) {
    Update_slot0(value ? 192ULL : 64ULL, 192ULL);
}

void TRuntimeFeatureFlags::ClearEnableSeparateSubmitThreadForPDisk() {
    Update_slot0(128ULL, 192ULL);
}

bool TRuntimeFeatureFlags::HasEnablePerOwnerChunkLimitForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 256ULL;
}

bool TRuntimeFeatureFlags::GetEnablePerOwnerChunkLimitForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 512ULL;
}

void TRuntimeFeatureFlags::SetEnablePerOwnerChunkLimitForPDisk(bool value) {
    Update_slot0(value ? 768ULL : 256ULL, 768ULL);
}

void TRuntimeFeatureFlags::ClearEnablePerOwnerChunkLimitForPDisk() {
    Update_slot0(0ULL, 768ULL);
}

bool TRuntimeFeatureFlags::HasTrimEntireDeviceOnStartup() const {
    return slot0_.load(std::memory_order_relaxed) & 1024ULL;
}

bool TRuntimeFeatureFlags::GetTrimEntireDeviceOnStartup() const {
    return slot0_.load(std::memory_order_relaxed) & 2048ULL;
}

void TRuntimeFeatureFlags::SetTrimEntireDeviceOnStartup(bool value) {
    Update_slot0(value ? 3072ULL : 1024ULL, 3072ULL);
}

void TRuntimeFeatureFlags::ClearTrimEntireDeviceOnStartup() {
    Update_slot0(0ULL, 3072ULL);
}

bool TRuntimeFeatureFlags::HasEnableChunkGraceForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 4096ULL;
}

bool TRuntimeFeatureFlags::GetEnableChunkGraceForPDisk() const {
    return slot0_.load(std::memory_order_relaxed) & 8192ULL;
}

void TRuntimeFeatureFlags::SetEnableChunkGraceForPDisk(bool value) {
    Update_slot0(value ? 12288ULL : 4096ULL, 12288ULL);
}

void TRuntimeFeatureFlags::ClearEnableChunkGraceForPDisk() {
    Update_slot0(8192ULL, 12288ULL);
}

bool TRuntimeFeatureFlags::HasAllowConsistentOperationsForSchemeShard() const {
    return slot0_.load(std::memory_order_relaxed) & 16384ULL;
}

bool TRuntimeFeatureFlags::GetAllowConsistentOperationsForSchemeShard() const {
    return slot0_.load(std::memory_order_relaxed) & 32768ULL;
}

void TRuntimeFeatureFlags::SetAllowConsistentOperationsForSchemeShard(bool value) {
    Update_slot0(value ? 49152ULL : 16384ULL, 49152ULL);
}

void TRuntimeFeatureFlags::ClearAllowConsistentOperationsForSchemeShard() {
    Update_slot0(32768ULL, 49152ULL);
}

bool TRuntimeFeatureFlags::HasEnableSchemeBoard() const {
    return slot0_.load(std::memory_order_relaxed) & 65536ULL;
}

bool TRuntimeFeatureFlags::GetEnableSchemeBoard() const {
    return slot0_.load(std::memory_order_relaxed) & 131072ULL;
}

void TRuntimeFeatureFlags::SetEnableSchemeBoard(bool value) {
    Update_slot0(value ? 196608ULL : 65536ULL, 196608ULL);
}

void TRuntimeFeatureFlags::ClearEnableSchemeBoard() {
    Update_slot0(131072ULL, 196608ULL);
}

bool TRuntimeFeatureFlags::HasAllowYdbRequestsWithoutDatabase() const {
    return slot0_.load(std::memory_order_relaxed) & 262144ULL;
}

bool TRuntimeFeatureFlags::GetAllowYdbRequestsWithoutDatabase() const {
    return slot0_.load(std::memory_order_relaxed) & 524288ULL;
}

void TRuntimeFeatureFlags::SetAllowYdbRequestsWithoutDatabase(bool value) {
    Update_slot0(value ? 786432ULL : 262144ULL, 786432ULL);
}

void TRuntimeFeatureFlags::ClearAllowYdbRequestsWithoutDatabase() {
    Update_slot0(524288ULL, 786432ULL);
}

bool TRuntimeFeatureFlags::HasEnableExternalSubdomains() const {
    return slot0_.load(std::memory_order_relaxed) & 1048576ULL;
}

bool TRuntimeFeatureFlags::GetEnableExternalSubdomains() const {
    return slot0_.load(std::memory_order_relaxed) & 2097152ULL;
}

void TRuntimeFeatureFlags::SetEnableExternalSubdomains(bool value) {
    Update_slot0(value ? 3145728ULL : 1048576ULL, 3145728ULL);
}

void TRuntimeFeatureFlags::ClearEnableExternalSubdomains() {
    Update_slot0(2097152ULL, 3145728ULL);
}

bool TRuntimeFeatureFlags::HasAllowRecursiveMkDir() const {
    return slot0_.load(std::memory_order_relaxed) & 4194304ULL;
}

bool TRuntimeFeatureFlags::GetAllowRecursiveMkDir() const {
    return slot0_.load(std::memory_order_relaxed) & 8388608ULL;
}

void TRuntimeFeatureFlags::SetAllowRecursiveMkDir(bool value) {
    Update_slot0(value ? 12582912ULL : 4194304ULL, 12582912ULL);
}

void TRuntimeFeatureFlags::ClearAllowRecursiveMkDir() {
    Update_slot0(8388608ULL, 12582912ULL);
}

bool TRuntimeFeatureFlags::HasAllowHugeKeyValueDeletes() const {
    return slot0_.load(std::memory_order_relaxed) & 16777216ULL;
}

bool TRuntimeFeatureFlags::GetAllowHugeKeyValueDeletes() const {
    return slot0_.load(std::memory_order_relaxed) & 33554432ULL;
}

void TRuntimeFeatureFlags::SetAllowHugeKeyValueDeletes(bool value) {
    Update_slot0(value ? 50331648ULL : 16777216ULL, 50331648ULL);
}

void TRuntimeFeatureFlags::ClearAllowHugeKeyValueDeletes() {
    Update_slot0(33554432ULL, 50331648ULL);
}

bool TRuntimeFeatureFlags::HasSendSchemaVersionToDatashard() const {
    return slot0_.load(std::memory_order_relaxed) & 67108864ULL;
}

bool TRuntimeFeatureFlags::GetSendSchemaVersionToDatashard() const {
    return slot0_.load(std::memory_order_relaxed) & 134217728ULL;
}

void TRuntimeFeatureFlags::SetSendSchemaVersionToDatashard(bool value) {
    Update_slot0(value ? 201326592ULL : 67108864ULL, 201326592ULL);
}

void TRuntimeFeatureFlags::ClearSendSchemaVersionToDatashard() {
    Update_slot0(134217728ULL, 201326592ULL);
}

bool TRuntimeFeatureFlags::HasEnableSchemeBoardCache() const {
    return slot0_.load(std::memory_order_relaxed) & 268435456ULL;
}

bool TRuntimeFeatureFlags::GetEnableSchemeBoardCache() const {
    return slot0_.load(std::memory_order_relaxed) & 536870912ULL;
}

void TRuntimeFeatureFlags::SetEnableSchemeBoardCache(bool value) {
    Update_slot0(value ? 805306368ULL : 268435456ULL, 805306368ULL);
}

void TRuntimeFeatureFlags::ClearEnableSchemeBoardCache() {
    Update_slot0(536870912ULL, 805306368ULL);
}

bool TRuntimeFeatureFlags::HasEnableSystemViews() const {
    return slot0_.load(std::memory_order_relaxed) & 1073741824ULL;
}

bool TRuntimeFeatureFlags::GetEnableSystemViews() const {
    return slot0_.load(std::memory_order_relaxed) & 2147483648ULL;
}

void TRuntimeFeatureFlags::SetEnableSystemViews(bool value) {
    Update_slot0(value ? 3221225472ULL : 1073741824ULL, 3221225472ULL);
}

void TRuntimeFeatureFlags::ClearEnableSystemViews() {
    Update_slot0(2147483648ULL, 3221225472ULL);
}

bool TRuntimeFeatureFlags::HasEnableExternalHive() const {
    return slot0_.load(std::memory_order_relaxed) & 4294967296ULL;
}

bool TRuntimeFeatureFlags::GetEnableExternalHive() const {
    return slot0_.load(std::memory_order_relaxed) & 8589934592ULL;
}

void TRuntimeFeatureFlags::SetEnableExternalHive(bool value) {
    Update_slot0(value ? 12884901888ULL : 4294967296ULL, 12884901888ULL);
}

void TRuntimeFeatureFlags::ClearEnableExternalHive() {
    Update_slot0(8589934592ULL, 12884901888ULL);
}

bool TRuntimeFeatureFlags::HasUseSchemeBoardCacheForSchemeRequests() const {
    return slot0_.load(std::memory_order_relaxed) & 17179869184ULL;
}

bool TRuntimeFeatureFlags::GetUseSchemeBoardCacheForSchemeRequests() const {
    return slot0_.load(std::memory_order_relaxed) & 34359738368ULL;
}

void TRuntimeFeatureFlags::SetUseSchemeBoardCacheForSchemeRequests(bool value) {
    Update_slot0(value ? 51539607552ULL : 17179869184ULL, 51539607552ULL);
}

void TRuntimeFeatureFlags::ClearUseSchemeBoardCacheForSchemeRequests() {
    Update_slot0(34359738368ULL, 51539607552ULL);
}

bool TRuntimeFeatureFlags::HasCompileMinikqlWithVersion() const {
    return slot0_.load(std::memory_order_relaxed) & 68719476736ULL;
}

bool TRuntimeFeatureFlags::GetCompileMinikqlWithVersion() const {
    return slot0_.load(std::memory_order_relaxed) & 137438953472ULL;
}

void TRuntimeFeatureFlags::SetCompileMinikqlWithVersion(bool value) {
    Update_slot0(value ? 206158430208ULL : 68719476736ULL, 206158430208ULL);
}

void TRuntimeFeatureFlags::ClearCompileMinikqlWithVersion() {
    Update_slot0(137438953472ULL, 206158430208ULL);
}

bool TRuntimeFeatureFlags::HasReadTableWithSnapshot() const {
    return slot0_.load(std::memory_order_relaxed) & 274877906944ULL;
}

bool TRuntimeFeatureFlags::GetReadTableWithSnapshot() const {
    return slot0_.load(std::memory_order_relaxed) & 549755813888ULL;
}

void TRuntimeFeatureFlags::SetReadTableWithSnapshot(bool value) {
    Update_slot0(value ? 824633720832ULL : 274877906944ULL, 824633720832ULL);
}

void TRuntimeFeatureFlags::ClearReadTableWithSnapshot() {
    Update_slot0(549755813888ULL, 824633720832ULL);
}

bool TRuntimeFeatureFlags::HasImportantTabletsUseSystemPool() const {
    return slot0_.load(std::memory_order_relaxed) & 1099511627776ULL;
}

bool TRuntimeFeatureFlags::GetImportantTabletsUseSystemPool() const {
    return slot0_.load(std::memory_order_relaxed) & 2199023255552ULL;
}

void TRuntimeFeatureFlags::SetImportantTabletsUseSystemPool(bool value) {
    Update_slot0(value ? 3298534883328ULL : 1099511627776ULL, 3298534883328ULL);
}

void TRuntimeFeatureFlags::ClearImportantTabletsUseSystemPool() {
    Update_slot0(2199023255552ULL, 3298534883328ULL);
}

bool TRuntimeFeatureFlags::HasEnableOfflineSlaves() const {
    return slot0_.load(std::memory_order_relaxed) & 4398046511104ULL;
}

bool TRuntimeFeatureFlags::GetEnableOfflineSlaves() const {
    return slot0_.load(std::memory_order_relaxed) & 8796093022208ULL;
}

void TRuntimeFeatureFlags::SetEnableOfflineSlaves(bool value) {
    Update_slot0(value ? 13194139533312ULL : 4398046511104ULL, 13194139533312ULL);
}

void TRuntimeFeatureFlags::ClearEnableOfflineSlaves() {
    Update_slot0(8796093022208ULL, 13194139533312ULL);
}

bool TRuntimeFeatureFlags::HasCheckDatabaseAccessPermission() const {
    return slot0_.load(std::memory_order_relaxed) & 17592186044416ULL;
}

bool TRuntimeFeatureFlags::GetCheckDatabaseAccessPermission() const {
    return slot0_.load(std::memory_order_relaxed) & 35184372088832ULL;
}

void TRuntimeFeatureFlags::SetCheckDatabaseAccessPermission(bool value) {
    Update_slot0(value ? 52776558133248ULL : 17592186044416ULL, 52776558133248ULL);
}

void TRuntimeFeatureFlags::ClearCheckDatabaseAccessPermission() {
    Update_slot0(0ULL, 52776558133248ULL);
}

bool TRuntimeFeatureFlags::HasAllowOnlineIndexBuild() const {
    return slot0_.load(std::memory_order_relaxed) & 70368744177664ULL;
}

bool TRuntimeFeatureFlags::GetAllowOnlineIndexBuild() const {
    return slot0_.load(std::memory_order_relaxed) & 140737488355328ULL;
}

void TRuntimeFeatureFlags::SetAllowOnlineIndexBuild(bool value) {
    Update_slot0(value ? 211106232532992ULL : 70368744177664ULL, 211106232532992ULL);
}

void TRuntimeFeatureFlags::ClearAllowOnlineIndexBuild() {
    Update_slot0(140737488355328ULL, 211106232532992ULL);
}

bool TRuntimeFeatureFlags::HasEnablePersistentQueryStats() const {
    return slot0_.load(std::memory_order_relaxed) & 281474976710656ULL;
}

bool TRuntimeFeatureFlags::GetEnablePersistentQueryStats() const {
    return slot0_.load(std::memory_order_relaxed) & 562949953421312ULL;
}

void TRuntimeFeatureFlags::SetEnablePersistentQueryStats(bool value) {
    Update_slot0(value ? 844424930131968ULL : 281474976710656ULL, 844424930131968ULL);
}

void TRuntimeFeatureFlags::ClearEnablePersistentQueryStats() {
    Update_slot0(562949953421312ULL, 844424930131968ULL);
}

bool TRuntimeFeatureFlags::HasDisableDataShardBarrier() const {
    return slot0_.load(std::memory_order_relaxed) & 1125899906842624ULL;
}

bool TRuntimeFeatureFlags::GetDisableDataShardBarrier() const {
    return slot0_.load(std::memory_order_relaxed) & 2251799813685248ULL;
}

void TRuntimeFeatureFlags::SetDisableDataShardBarrier(bool value) {
    Update_slot0(value ? 3377699720527872ULL : 1125899906842624ULL, 3377699720527872ULL);
}

void TRuntimeFeatureFlags::ClearDisableDataShardBarrier() {
    Update_slot0(0ULL, 3377699720527872ULL);
}

bool TRuntimeFeatureFlags::HasEnablePutBatchingForBlobStorage() const {
    return slot0_.load(std::memory_order_relaxed) & 4503599627370496ULL;
}

bool TRuntimeFeatureFlags::GetEnablePutBatchingForBlobStorage() const {
    return slot0_.load(std::memory_order_relaxed) & 9007199254740992ULL;
}

void TRuntimeFeatureFlags::SetEnablePutBatchingForBlobStorage(bool value) {
    Update_slot0(value ? 13510798882111488ULL : 4503599627370496ULL, 13510798882111488ULL);
}

void TRuntimeFeatureFlags::ClearEnablePutBatchingForBlobStorage() {
    Update_slot0(9007199254740992ULL, 13510798882111488ULL);
}

bool TRuntimeFeatureFlags::HasEnableKqpWideFlow() const {
    return slot0_.load(std::memory_order_relaxed) & 18014398509481984ULL;
}

bool TRuntimeFeatureFlags::GetEnableKqpWideFlow() const {
    return slot0_.load(std::memory_order_relaxed) & 36028797018963968ULL;
}

void TRuntimeFeatureFlags::SetEnableKqpWideFlow(bool value) {
    Update_slot0(value ? 54043195528445952ULL : 18014398509481984ULL, 54043195528445952ULL);
}

void TRuntimeFeatureFlags::ClearEnableKqpWideFlow() {
    Update_slot0(36028797018963968ULL, 54043195528445952ULL);
}

bool TRuntimeFeatureFlags::HasEnableKqpScanQueries() const {
    return slot0_.load(std::memory_order_relaxed) & 72057594037927936ULL;
}

bool TRuntimeFeatureFlags::GetEnableKqpScanQueries() const {
    return slot0_.load(std::memory_order_relaxed) & 144115188075855872ULL;
}

void TRuntimeFeatureFlags::SetEnableKqpScanQueries(bool value) {
    Update_slot0(value ? 216172782113783808ULL : 72057594037927936ULL, 216172782113783808ULL);
}

void TRuntimeFeatureFlags::ClearEnableKqpScanQueries() {
    Update_slot0(144115188075855872ULL, 216172782113783808ULL);
}

bool TRuntimeFeatureFlags::HasEnablePersistentPartitionStats() const {
    return slot0_.load(std::memory_order_relaxed) & 288230376151711744ULL;
}

bool TRuntimeFeatureFlags::GetEnablePersistentPartitionStats() const {
    return slot0_.load(std::memory_order_relaxed) & 576460752303423488ULL;
}

void TRuntimeFeatureFlags::SetEnablePersistentPartitionStats(bool value) {
    Update_slot0(value ? 864691128455135232ULL : 288230376151711744ULL, 864691128455135232ULL);
}

void TRuntimeFeatureFlags::ClearEnablePersistentPartitionStats() {
    Update_slot0(0ULL, 864691128455135232ULL);
}

bool TRuntimeFeatureFlags::HasEnableTtlOnIndexedTables() const {
    return slot0_.load(std::memory_order_relaxed) & 1152921504606846976ULL;
}

bool TRuntimeFeatureFlags::GetEnableTtlOnIndexedTables() const {
    return slot0_.load(std::memory_order_relaxed) & 2305843009213693952ULL;
}

void TRuntimeFeatureFlags::SetEnableTtlOnIndexedTables(bool value) {
    Update_slot0(value ? 3458764513820540928ULL : 1152921504606846976ULL, 3458764513820540928ULL);
}

void TRuntimeFeatureFlags::ClearEnableTtlOnIndexedTables() {
    Update_slot0(2305843009213693952ULL, 3458764513820540928ULL);
}

bool TRuntimeFeatureFlags::HasAllowUpdateChannelsBindingOfSolomonPartitions() const {
    return slot0_.load(std::memory_order_relaxed) & 4611686018427387904ULL;
}

bool TRuntimeFeatureFlags::GetAllowUpdateChannelsBindingOfSolomonPartitions() const {
    return slot0_.load(std::memory_order_relaxed) & 9223372036854775808ULL;
}

void TRuntimeFeatureFlags::SetAllowUpdateChannelsBindingOfSolomonPartitions(bool value) {
    Update_slot0(value ? 13835058055282163712ULL : 4611686018427387904ULL, 13835058055282163712ULL);
}

void TRuntimeFeatureFlags::ClearAllowUpdateChannelsBindingOfSolomonPartitions() {
    Update_slot0(0ULL, 13835058055282163712ULL);
}

bool TRuntimeFeatureFlags::HasDisableLegacyYql() const {
    return slot1_.load(std::memory_order_relaxed) & 1ULL;
}

bool TRuntimeFeatureFlags::GetDisableLegacyYql() const {
    return slot1_.load(std::memory_order_relaxed) & 2ULL;
}

void TRuntimeFeatureFlags::SetDisableLegacyYql(bool value) {
    Update_slot1(value ? 3ULL : 1ULL, 3ULL);
}

void TRuntimeFeatureFlags::ClearDisableLegacyYql() {
    Update_slot1(2ULL, 3ULL);
}

bool TRuntimeFeatureFlags::HasEnableDataColumnForIndexTable() const {
    return slot1_.load(std::memory_order_relaxed) & 4ULL;
}

bool TRuntimeFeatureFlags::GetEnableDataColumnForIndexTable() const {
    return slot1_.load(std::memory_order_relaxed) & 8ULL;
}

void TRuntimeFeatureFlags::SetEnableDataColumnForIndexTable(bool value) {
    Update_slot1(value ? 12ULL : 4ULL, 12ULL);
}

void TRuntimeFeatureFlags::ClearEnableDataColumnForIndexTable() {
    Update_slot1(8ULL, 12ULL);
}

bool TRuntimeFeatureFlags::HasAllowServerlessStorageBillingForSchemeShard() const {
    return slot1_.load(std::memory_order_relaxed) & 16ULL;
}

bool TRuntimeFeatureFlags::GetAllowServerlessStorageBillingForSchemeShard() const {
    return slot1_.load(std::memory_order_relaxed) & 32ULL;
}

void TRuntimeFeatureFlags::SetAllowServerlessStorageBillingForSchemeShard(bool value) {
    Update_slot1(value ? 48ULL : 16ULL, 48ULL);
}

void TRuntimeFeatureFlags::ClearAllowServerlessStorageBillingForSchemeShard() {
    Update_slot1(0ULL, 48ULL);
}

bool TRuntimeFeatureFlags::HasEnableGracefulShutdown() const {
    return slot1_.load(std::memory_order_relaxed) & 64ULL;
}

bool TRuntimeFeatureFlags::GetEnableGracefulShutdown() const {
    return slot1_.load(std::memory_order_relaxed) & 128ULL;
}

void TRuntimeFeatureFlags::SetEnableGracefulShutdown(bool value) {
    Update_slot1(value ? 192ULL : 64ULL, 192ULL);
}

void TRuntimeFeatureFlags::ClearEnableGracefulShutdown() {
    Update_slot1(128ULL, 192ULL);
}

bool TRuntimeFeatureFlags::HasEnableDrainOnShutdown() const {
    return slot1_.load(std::memory_order_relaxed) & 256ULL;
}

bool TRuntimeFeatureFlags::GetEnableDrainOnShutdown() const {
    return slot1_.load(std::memory_order_relaxed) & 512ULL;
}

void TRuntimeFeatureFlags::SetEnableDrainOnShutdown(bool value) {
    Update_slot1(value ? 768ULL : 256ULL, 768ULL);
}

void TRuntimeFeatureFlags::ClearEnableDrainOnShutdown() {
    Update_slot1(512ULL, 768ULL);
}

bool TRuntimeFeatureFlags::HasEnableConfigurationCache() const {
    return slot1_.load(std::memory_order_relaxed) & 1024ULL;
}

bool TRuntimeFeatureFlags::GetEnableConfigurationCache() const {
    return slot1_.load(std::memory_order_relaxed) & 2048ULL;
}

void TRuntimeFeatureFlags::SetEnableConfigurationCache(bool value) {
    Update_slot1(value ? 3072ULL : 1024ULL, 3072ULL);
}

void TRuntimeFeatureFlags::ClearEnableConfigurationCache() {
    Update_slot1(0ULL, 3072ULL);
}

bool TRuntimeFeatureFlags::HasEnableDbCounters() const {
    return slot1_.load(std::memory_order_relaxed) & 4096ULL;
}

bool TRuntimeFeatureFlags::GetEnableDbCounters() const {
    return slot1_.load(std::memory_order_relaxed) & 8192ULL;
}

void TRuntimeFeatureFlags::SetEnableDbCounters(bool value) {
    Update_slot1(value ? 12288ULL : 4096ULL, 12288ULL);
}

void TRuntimeFeatureFlags::ClearEnableDbCounters() {
    Update_slot1(0ULL, 12288ULL);
}

bool TRuntimeFeatureFlags::HasEnableClockGettimeForUserCpuAccounting() const {
    return slot1_.load(std::memory_order_relaxed) & 16384ULL;
}

bool TRuntimeFeatureFlags::GetEnableClockGettimeForUserCpuAccounting() const {
    return slot1_.load(std::memory_order_relaxed) & 32768ULL;
}

void TRuntimeFeatureFlags::SetEnableClockGettimeForUserCpuAccounting(bool value) {
    Update_slot1(value ? 49152ULL : 16384ULL, 49152ULL);
}

void TRuntimeFeatureFlags::ClearEnableClockGettimeForUserCpuAccounting() {
    Update_slot1(0ULL, 49152ULL);
}

bool TRuntimeFeatureFlags::HasEnableAsyncIndexes() const {
    return slot1_.load(std::memory_order_relaxed) & 65536ULL;
}

bool TRuntimeFeatureFlags::GetEnableAsyncIndexes() const {
    return slot1_.load(std::memory_order_relaxed) & 131072ULL;
}

void TRuntimeFeatureFlags::SetEnableAsyncIndexes(bool value) {
    Update_slot1(value ? 196608ULL : 65536ULL, 196608ULL);
}

void TRuntimeFeatureFlags::ClearEnableAsyncIndexes() {
    Update_slot1(131072ULL, 196608ULL);
}

bool TRuntimeFeatureFlags::HasAllowStreamExecuteYqlScript() const {
    return slot1_.load(std::memory_order_relaxed) & 262144ULL;
}

bool TRuntimeFeatureFlags::GetAllowStreamExecuteYqlScript() const {
    return slot1_.load(std::memory_order_relaxed) & 524288ULL;
}

void TRuntimeFeatureFlags::SetAllowStreamExecuteYqlScript(bool value) {
    Update_slot1(value ? 786432ULL : 262144ULL, 786432ULL);
}

void TRuntimeFeatureFlags::ClearAllowStreamExecuteYqlScript() {
    Update_slot1(524288ULL, 786432ULL);
}

bool TRuntimeFeatureFlags::HasEnableKqpScanOverPersistentSnapshot() const {
    return slot1_.load(std::memory_order_relaxed) & 1048576ULL;
}

bool TRuntimeFeatureFlags::GetEnableKqpScanOverPersistentSnapshot() const {
    return slot1_.load(std::memory_order_relaxed) & 2097152ULL;
}

void TRuntimeFeatureFlags::SetEnableKqpScanOverPersistentSnapshot(bool value) {
    Update_slot1(value ? 3145728ULL : 1048576ULL, 3145728ULL);
}

void TRuntimeFeatureFlags::ClearEnableKqpScanOverPersistentSnapshot() {
    Update_slot1(2097152ULL, 3145728ULL);
}

bool TRuntimeFeatureFlags::HasEnableOlapSchemaOperations() const {
    return slot1_.load(std::memory_order_relaxed) & 4194304ULL;
}

bool TRuntimeFeatureFlags::GetEnableOlapSchemaOperations() const {
    return slot1_.load(std::memory_order_relaxed) & 8388608ULL;
}

void TRuntimeFeatureFlags::SetEnableOlapSchemaOperations(bool value) {
    Update_slot1(value ? 12582912ULL : 4194304ULL, 12582912ULL);
}

void TRuntimeFeatureFlags::ClearEnableOlapSchemaOperations() {
    Update_slot1(8388608ULL, 12582912ULL);
}

bool TRuntimeFeatureFlags::HasEnableVPatch() const {
    return slot1_.load(std::memory_order_relaxed) & 16777216ULL;
}

bool TRuntimeFeatureFlags::GetEnableVPatch() const {
    return slot1_.load(std::memory_order_relaxed) & 33554432ULL;
}

void TRuntimeFeatureFlags::SetEnableVPatch(bool value) {
    Update_slot1(value ? 50331648ULL : 16777216ULL, 50331648ULL);
}

void TRuntimeFeatureFlags::ClearEnableVPatch() {
    Update_slot1(33554432ULL, 50331648ULL);
}

bool TRuntimeFeatureFlags::HasEnableMvccSnapshotReads() const {
    return slot1_.load(std::memory_order_relaxed) & 67108864ULL;
}

bool TRuntimeFeatureFlags::GetEnableMvccSnapshotReads() const {
    return slot1_.load(std::memory_order_relaxed) & 134217728ULL;
}

void TRuntimeFeatureFlags::SetEnableMvccSnapshotReads(bool value) {
    Update_slot1(value ? 201326592ULL : 67108864ULL, 201326592ULL);
}

void TRuntimeFeatureFlags::ClearEnableMvccSnapshotReads() {
    Update_slot1(134217728ULL, 201326592ULL);
}

bool TRuntimeFeatureFlags::HasEnableSchemeTransactionsAtSchemeShard() const {
    return slot1_.load(std::memory_order_relaxed) & 268435456ULL;
}

bool TRuntimeFeatureFlags::GetEnableSchemeTransactionsAtSchemeShard() const {
    return slot1_.load(std::memory_order_relaxed) & 536870912ULL;
}

void TRuntimeFeatureFlags::SetEnableSchemeTransactionsAtSchemeShard(bool value) {
    Update_slot1(value ? 805306368ULL : 268435456ULL, 805306368ULL);
}

void TRuntimeFeatureFlags::ClearEnableSchemeTransactionsAtSchemeShard() {
    Update_slot1(536870912ULL, 805306368ULL);
}

bool TRuntimeFeatureFlags::HasEnableArrowFormatAtDatashard() const {
    return slot1_.load(std::memory_order_relaxed) & 1073741824ULL;
}

bool TRuntimeFeatureFlags::GetEnableArrowFormatAtDatashard() const {
    return slot1_.load(std::memory_order_relaxed) & 2147483648ULL;
}

void TRuntimeFeatureFlags::SetEnableArrowFormatAtDatashard(bool value) {
    Update_slot1(value ? 3221225472ULL : 1073741824ULL, 3221225472ULL);
}

void TRuntimeFeatureFlags::ClearEnableArrowFormatAtDatashard() {
    Update_slot1(0ULL, 3221225472ULL);
}

bool TRuntimeFeatureFlags::HasEnable3x3RequestsForMirror3DCMinLatencyPut() const {
    return slot1_.load(std::memory_order_relaxed) & 4294967296ULL;
}

bool TRuntimeFeatureFlags::GetEnable3x3RequestsForMirror3DCMinLatencyPut() const {
    return slot1_.load(std::memory_order_relaxed) & 8589934592ULL;
}

void TRuntimeFeatureFlags::SetEnable3x3RequestsForMirror3DCMinLatencyPut(bool value) {
    Update_slot1(value ? 12884901888ULL : 4294967296ULL, 12884901888ULL);
}

void TRuntimeFeatureFlags::ClearEnable3x3RequestsForMirror3DCMinLatencyPut() {
    Update_slot1(0ULL, 12884901888ULL);
}

bool TRuntimeFeatureFlags::HasEnableBackgroundCompaction() const {
    return slot1_.load(std::memory_order_relaxed) & 17179869184ULL;
}

bool TRuntimeFeatureFlags::GetEnableBackgroundCompaction() const {
    return slot1_.load(std::memory_order_relaxed) & 34359738368ULL;
}

void TRuntimeFeatureFlags::SetEnableBackgroundCompaction(bool value) {
    Update_slot1(value ? 51539607552ULL : 17179869184ULL, 51539607552ULL);
}

void TRuntimeFeatureFlags::ClearEnableBackgroundCompaction() {
    Update_slot1(34359738368ULL, 51539607552ULL);
}

bool TRuntimeFeatureFlags::HasEnableArrowFormatInChannels() const {
    return slot1_.load(std::memory_order_relaxed) & 68719476736ULL;
}

bool TRuntimeFeatureFlags::GetEnableArrowFormatInChannels() const {
    return slot1_.load(std::memory_order_relaxed) & 137438953472ULL;
}

void TRuntimeFeatureFlags::SetEnableArrowFormatInChannels(bool value) {
    Update_slot1(value ? 206158430208ULL : 68719476736ULL, 206158430208ULL);
}

void TRuntimeFeatureFlags::ClearEnableArrowFormatInChannels() {
    Update_slot1(0ULL, 206158430208ULL);
}

bool TRuntimeFeatureFlags::HasEnableBackgroundCompactionServerless() const {
    return slot1_.load(std::memory_order_relaxed) & 274877906944ULL;
}

bool TRuntimeFeatureFlags::GetEnableBackgroundCompactionServerless() const {
    return slot1_.load(std::memory_order_relaxed) & 549755813888ULL;
}

void TRuntimeFeatureFlags::SetEnableBackgroundCompactionServerless(bool value) {
    Update_slot1(value ? 824633720832ULL : 274877906944ULL, 824633720832ULL);
}

void TRuntimeFeatureFlags::ClearEnableBackgroundCompactionServerless() {
    Update_slot1(0ULL, 824633720832ULL);
}

bool TRuntimeFeatureFlags::HasEnableNotNullColumns() const {
    return slot1_.load(std::memory_order_relaxed) & 1099511627776ULL;
}

bool TRuntimeFeatureFlags::GetEnableNotNullColumns() const {
    return slot1_.load(std::memory_order_relaxed) & 2199023255552ULL;
}

void TRuntimeFeatureFlags::SetEnableNotNullColumns(bool value) {
    Update_slot1(value ? 3298534883328ULL : 1099511627776ULL, 3298534883328ULL);
}

void TRuntimeFeatureFlags::ClearEnableNotNullColumns() {
    Update_slot1(2199023255552ULL, 3298534883328ULL);
}

bool TRuntimeFeatureFlags::HasEnableTtlOnAsyncIndexedTables() const {
    return slot1_.load(std::memory_order_relaxed) & 4398046511104ULL;
}

bool TRuntimeFeatureFlags::GetEnableTtlOnAsyncIndexedTables() const {
    return slot1_.load(std::memory_order_relaxed) & 8796093022208ULL;
}

void TRuntimeFeatureFlags::SetEnableTtlOnAsyncIndexedTables(bool value) {
    Update_slot1(value ? 13194139533312ULL : 4398046511104ULL, 13194139533312ULL);
}

void TRuntimeFeatureFlags::ClearEnableTtlOnAsyncIndexedTables() {
    Update_slot1(8796093022208ULL, 13194139533312ULL);
}

bool TRuntimeFeatureFlags::HasEnableBulkUpsertToAsyncIndexedTables() const {
    return slot1_.load(std::memory_order_relaxed) & 17592186044416ULL;
}

bool TRuntimeFeatureFlags::GetEnableBulkUpsertToAsyncIndexedTables() const {
    return slot1_.load(std::memory_order_relaxed) & 35184372088832ULL;
}

void TRuntimeFeatureFlags::SetEnableBulkUpsertToAsyncIndexedTables(bool value) {
    Update_slot1(value ? 52776558133248ULL : 17592186044416ULL, 52776558133248ULL);
}

void TRuntimeFeatureFlags::ClearEnableBulkUpsertToAsyncIndexedTables() {
    Update_slot1(35184372088832ULL, 52776558133248ULL);
}

bool TRuntimeFeatureFlags::HasEnableNodeBrokerSingleDomainMode() const {
    return slot1_.load(std::memory_order_relaxed) & 70368744177664ULL;
}

bool TRuntimeFeatureFlags::GetEnableNodeBrokerSingleDomainMode() const {
    return slot1_.load(std::memory_order_relaxed) & 140737488355328ULL;
}

void TRuntimeFeatureFlags::SetEnableNodeBrokerSingleDomainMode(bool value) {
    Update_slot1(value ? 211106232532992ULL : 70368744177664ULL, 211106232532992ULL);
}

void TRuntimeFeatureFlags::ClearEnableNodeBrokerSingleDomainMode() {
    Update_slot1(140737488355328ULL, 211106232532992ULL);
}

bool TRuntimeFeatureFlags::HasEnablePublicApiExternalBlobs() const {
    return slot1_.load(std::memory_order_relaxed) & 281474976710656ULL;
}

bool TRuntimeFeatureFlags::GetEnablePublicApiExternalBlobs() const {
    return slot1_.load(std::memory_order_relaxed) & 562949953421312ULL;
}

void TRuntimeFeatureFlags::SetEnablePublicApiExternalBlobs(bool value) {
    Update_slot1(value ? 844424930131968ULL : 281474976710656ULL, 844424930131968ULL);
}

void TRuntimeFeatureFlags::ClearEnablePublicApiExternalBlobs() {
    Update_slot1(0ULL, 844424930131968ULL);
}

bool TRuntimeFeatureFlags::HasEnablePublicApiKeepInMemory() const {
    return slot1_.load(std::memory_order_relaxed) & 1125899906842624ULL;
}

bool TRuntimeFeatureFlags::GetEnablePublicApiKeepInMemory() const {
    return slot1_.load(std::memory_order_relaxed) & 2251799813685248ULL;
}

void TRuntimeFeatureFlags::SetEnablePublicApiKeepInMemory(bool value) {
    Update_slot1(value ? 3377699720527872ULL : 1125899906842624ULL, 3377699720527872ULL);
}

void TRuntimeFeatureFlags::ClearEnablePublicApiKeepInMemory() {
    Update_slot1(0ULL, 3377699720527872ULL);
}

bool TRuntimeFeatureFlags::HasEnableImplicitScanQueryInScripts() const {
    return slot1_.load(std::memory_order_relaxed) & 4503599627370496ULL;
}

bool TRuntimeFeatureFlags::GetEnableImplicitScanQueryInScripts() const {
    return slot1_.load(std::memory_order_relaxed) & 9007199254740992ULL;
}

void TRuntimeFeatureFlags::SetEnableImplicitScanQueryInScripts(bool value) {
    Update_slot1(value ? 13510798882111488ULL : 4503599627370496ULL, 13510798882111488ULL);
}

void TRuntimeFeatureFlags::ClearEnableImplicitScanQueryInScripts() {
    Update_slot1(9007199254740992ULL, 13510798882111488ULL);
}

bool TRuntimeFeatureFlags::HasAllowVDiskDefrag() const {
    return slot1_.load(std::memory_order_relaxed) & 18014398509481984ULL;
}

bool TRuntimeFeatureFlags::GetAllowVDiskDefrag() const {
    return slot1_.load(std::memory_order_relaxed) & 36028797018963968ULL;
}

void TRuntimeFeatureFlags::SetAllowVDiskDefrag(bool value) {
    Update_slot1(value ? 54043195528445952ULL : 18014398509481984ULL, 54043195528445952ULL);
}

void TRuntimeFeatureFlags::ClearAllowVDiskDefrag() {
    Update_slot1(36028797018963968ULL, 54043195528445952ULL);
}

bool TRuntimeFeatureFlags::HasEnableAsyncHttpMon() const {
    return slot1_.load(std::memory_order_relaxed) & 72057594037927936ULL;
}

bool TRuntimeFeatureFlags::GetEnableAsyncHttpMon() const {
    return slot1_.load(std::memory_order_relaxed) & 144115188075855872ULL;
}

void TRuntimeFeatureFlags::SetEnableAsyncHttpMon(bool value) {
    Update_slot1(value ? 216172782113783808ULL : 72057594037927936ULL, 216172782113783808ULL);
}

void TRuntimeFeatureFlags::ClearEnableAsyncHttpMon() {
    Update_slot1(144115188075855872ULL, 216172782113783808ULL);
}

bool TRuntimeFeatureFlags::HasEnableChangefeeds() const {
    return slot1_.load(std::memory_order_relaxed) & 288230376151711744ULL;
}

bool TRuntimeFeatureFlags::GetEnableChangefeeds() const {
    return slot1_.load(std::memory_order_relaxed) & 576460752303423488ULL;
}

void TRuntimeFeatureFlags::SetEnableChangefeeds(bool value) {
    Update_slot1(value ? 864691128455135232ULL : 288230376151711744ULL, 864691128455135232ULL);
}

void TRuntimeFeatureFlags::ClearEnableChangefeeds() {
    Update_slot1(576460752303423488ULL, 864691128455135232ULL);
}

bool TRuntimeFeatureFlags::HasEnableKqpScanQueryMultipleOlapShardsReads() const {
    return slot1_.load(std::memory_order_relaxed) & 1152921504606846976ULL;
}

bool TRuntimeFeatureFlags::GetEnableKqpScanQueryMultipleOlapShardsReads() const {
    return slot1_.load(std::memory_order_relaxed) & 2305843009213693952ULL;
}

void TRuntimeFeatureFlags::SetEnableKqpScanQueryMultipleOlapShardsReads(bool value) {
    Update_slot1(value ? 3458764513820540928ULL : 1152921504606846976ULL, 3458764513820540928ULL);
}

void TRuntimeFeatureFlags::ClearEnableKqpScanQueryMultipleOlapShardsReads() {
    Update_slot1(0ULL, 3458764513820540928ULL);
}

bool TRuntimeFeatureFlags::HasEnableMoveIndex() const {
    return slot1_.load(std::memory_order_relaxed) & 4611686018427387904ULL;
}

bool TRuntimeFeatureFlags::GetEnableMoveIndex() const {
    return slot1_.load(std::memory_order_relaxed) & 9223372036854775808ULL;
}

void TRuntimeFeatureFlags::SetEnableMoveIndex(bool value) {
    Update_slot1(value ? 13835058055282163712ULL : 4611686018427387904ULL, 13835058055282163712ULL);
}

void TRuntimeFeatureFlags::ClearEnableMoveIndex() {
    Update_slot1(9223372036854775808ULL, 13835058055282163712ULL);
}

bool TRuntimeFeatureFlags::HasEnableFailureInjectionTermination() const {
    return slot2_.load(std::memory_order_relaxed) & 1ULL;
}

bool TRuntimeFeatureFlags::GetEnableFailureInjectionTermination() const {
    return slot2_.load(std::memory_order_relaxed) & 2ULL;
}

void TRuntimeFeatureFlags::SetEnableFailureInjectionTermination(bool value) {
    Update_slot2(value ? 3ULL : 1ULL, 3ULL);
}

void TRuntimeFeatureFlags::ClearEnableFailureInjectionTermination() {
    Update_slot2(0ULL, 3ULL);
}

bool TRuntimeFeatureFlags::HasEnableChunkLocking() const {
    return slot2_.load(std::memory_order_relaxed) & 4ULL;
}

bool TRuntimeFeatureFlags::GetEnableChunkLocking() const {
    return slot2_.load(std::memory_order_relaxed) & 8ULL;
}

void TRuntimeFeatureFlags::SetEnableChunkLocking(bool value) {
    Update_slot2(value ? 12ULL : 4ULL, 12ULL);
}

void TRuntimeFeatureFlags::ClearEnableChunkLocking() {
    Update_slot2(0ULL, 12ULL);
}

bool TRuntimeFeatureFlags::HasEnableNotNullDataColumns() const {
    return slot2_.load(std::memory_order_relaxed) & 16ULL;
}

bool TRuntimeFeatureFlags::GetEnableNotNullDataColumns() const {
    return slot2_.load(std::memory_order_relaxed) & 32ULL;
}

void TRuntimeFeatureFlags::SetEnableNotNullDataColumns(bool value) {
    Update_slot2(value ? 48ULL : 16ULL, 48ULL);
}

void TRuntimeFeatureFlags::ClearEnableNotNullDataColumns() {
    Update_slot2(32ULL, 48ULL);
}

bool TRuntimeFeatureFlags::HasEnableGrpcAudit() const {
    return slot2_.load(std::memory_order_relaxed) & 64ULL;
}

bool TRuntimeFeatureFlags::GetEnableGrpcAudit() const {
    return slot2_.load(std::memory_order_relaxed) & 128ULL;
}

void TRuntimeFeatureFlags::SetEnableGrpcAudit(bool value) {
    Update_slot2(value ? 192ULL : 64ULL, 192ULL);
}

void TRuntimeFeatureFlags::ClearEnableGrpcAudit() {
    Update_slot2(0ULL, 192ULL);
}

bool TRuntimeFeatureFlags::HasEnableBorrowedSplitCompaction() const {
    return slot2_.load(std::memory_order_relaxed) & 256ULL;
}

bool TRuntimeFeatureFlags::GetEnableBorrowedSplitCompaction() const {
    return slot2_.load(std::memory_order_relaxed) & 512ULL;
}

void TRuntimeFeatureFlags::SetEnableBorrowedSplitCompaction(bool value) {
    Update_slot2(value ? 768ULL : 256ULL, 768ULL);
}

void TRuntimeFeatureFlags::ClearEnableBorrowedSplitCompaction() {
    Update_slot2(512ULL, 768ULL);
}

bool TRuntimeFeatureFlags::HasEnableChangefeedInitialScan() const {
    return slot2_.load(std::memory_order_relaxed) & 1024ULL;
}

bool TRuntimeFeatureFlags::GetEnableChangefeedInitialScan() const {
    return slot2_.load(std::memory_order_relaxed) & 2048ULL;
}

void TRuntimeFeatureFlags::SetEnableChangefeedInitialScan(bool value) {
    Update_slot2(value ? 3072ULL : 1024ULL, 3072ULL);
}

void TRuntimeFeatureFlags::ClearEnableChangefeedInitialScan() {
    Update_slot2(2048ULL, 3072ULL);
}

bool TRuntimeFeatureFlags::HasEnableDynamicNodeAuthorization() const {
    return slot2_.load(std::memory_order_relaxed) & 4096ULL;
}

bool TRuntimeFeatureFlags::GetEnableDynamicNodeAuthorization() const {
    return slot2_.load(std::memory_order_relaxed) & 8192ULL;
}

void TRuntimeFeatureFlags::SetEnableDynamicNodeAuthorization(bool value) {
    Update_slot2(value ? 12288ULL : 4096ULL, 12288ULL);
}

void TRuntimeFeatureFlags::ClearEnableDynamicNodeAuthorization() {
    Update_slot2(0ULL, 12288ULL);
}

bool TRuntimeFeatureFlags::HasEnableDataShardGenericReadSets() const {
    return slot2_.load(std::memory_order_relaxed) & 16384ULL;
}

bool TRuntimeFeatureFlags::GetEnableDataShardGenericReadSets() const {
    return slot2_.load(std::memory_order_relaxed) & 32768ULL;
}

void TRuntimeFeatureFlags::SetEnableDataShardGenericReadSets(bool value) {
    Update_slot2(value ? 49152ULL : 16384ULL, 49152ULL);
}

void TRuntimeFeatureFlags::ClearEnableDataShardGenericReadSets() {
    Update_slot2(0ULL, 49152ULL);
}

bool TRuntimeFeatureFlags::HasEnableAlterDatabaseCreateHiveFirst() const {
    return slot2_.load(std::memory_order_relaxed) & 65536ULL;
}

bool TRuntimeFeatureFlags::GetEnableAlterDatabaseCreateHiveFirst() const {
    return slot2_.load(std::memory_order_relaxed) & 131072ULL;
}

void TRuntimeFeatureFlags::SetEnableAlterDatabaseCreateHiveFirst(bool value) {
    Update_slot2(value ? 196608ULL : 65536ULL, 196608ULL);
}

void TRuntimeFeatureFlags::ClearEnableAlterDatabaseCreateHiveFirst() {
    Update_slot2(0ULL, 196608ULL);
}

bool TRuntimeFeatureFlags::HasEnableSmallDiskOptimization() const {
    return slot2_.load(std::memory_order_relaxed) & 262144ULL;
}

bool TRuntimeFeatureFlags::GetEnableSmallDiskOptimization() const {
    return slot2_.load(std::memory_order_relaxed) & 524288ULL;
}

void TRuntimeFeatureFlags::SetEnableSmallDiskOptimization(bool value) {
    Update_slot2(value ? 786432ULL : 262144ULL, 786432ULL);
}

void TRuntimeFeatureFlags::ClearEnableSmallDiskOptimization() {
    Update_slot2(524288ULL, 786432ULL);
}

bool TRuntimeFeatureFlags::HasEnableDataShardVolatileTransactions() const {
    return slot2_.load(std::memory_order_relaxed) & 1048576ULL;
}

bool TRuntimeFeatureFlags::GetEnableDataShardVolatileTransactions() const {
    return slot2_.load(std::memory_order_relaxed) & 2097152ULL;
}

void TRuntimeFeatureFlags::SetEnableDataShardVolatileTransactions(bool value) {
    Update_slot2(value ? 3145728ULL : 1048576ULL, 3145728ULL);
}

void TRuntimeFeatureFlags::ClearEnableDataShardVolatileTransactions() {
    Update_slot2(2097152ULL, 3145728ULL);
}

bool TRuntimeFeatureFlags::HasEnableTopicServiceTx() const {
    return slot2_.load(std::memory_order_relaxed) & 4194304ULL;
}

bool TRuntimeFeatureFlags::GetEnableTopicServiceTx() const {
    return slot2_.load(std::memory_order_relaxed) & 8388608ULL;
}

void TRuntimeFeatureFlags::SetEnableTopicServiceTx(bool value) {
    Update_slot2(value ? 12582912ULL : 4194304ULL, 12582912ULL);
}

void TRuntimeFeatureFlags::ClearEnableTopicServiceTx() {
    Update_slot2(0ULL, 12582912ULL);
}

bool TRuntimeFeatureFlags::HasEnableLLVMCache() const {
    return slot2_.load(std::memory_order_relaxed) & 16777216ULL;
}

bool TRuntimeFeatureFlags::GetEnableLLVMCache() const {
    return slot2_.load(std::memory_order_relaxed) & 33554432ULL;
}

void TRuntimeFeatureFlags::SetEnableLLVMCache(bool value) {
    Update_slot2(value ? 50331648ULL : 16777216ULL, 50331648ULL);
}

void TRuntimeFeatureFlags::ClearEnableLLVMCache() {
    Update_slot2(0ULL, 50331648ULL);
}

bool TRuntimeFeatureFlags::HasEnableExternalDataSources() const {
    return slot2_.load(std::memory_order_relaxed) & 67108864ULL;
}

bool TRuntimeFeatureFlags::GetEnableExternalDataSources() const {
    return slot2_.load(std::memory_order_relaxed) & 134217728ULL;
}

void TRuntimeFeatureFlags::SetEnableExternalDataSources(bool value) {
    Update_slot2(value ? 201326592ULL : 67108864ULL, 201326592ULL);
}

void TRuntimeFeatureFlags::ClearEnableExternalDataSources() {
    Update_slot2(0ULL, 201326592ULL);
}

bool TRuntimeFeatureFlags::HasEnableTopicDiskSubDomainQuota() const {
    return slot2_.load(std::memory_order_relaxed) & 268435456ULL;
}

bool TRuntimeFeatureFlags::GetEnableTopicDiskSubDomainQuota() const {
    return slot2_.load(std::memory_order_relaxed) & 536870912ULL;
}

void TRuntimeFeatureFlags::SetEnableTopicDiskSubDomainQuota(bool value) {
    Update_slot2(value ? 805306368ULL : 268435456ULL, 805306368ULL);
}

void TRuntimeFeatureFlags::ClearEnableTopicDiskSubDomainQuota() {
    Update_slot2(536870912ULL, 805306368ULL);
}

bool TRuntimeFeatureFlags::HasEnableSeparationComputeActorsFromRead() const {
    return slot2_.load(std::memory_order_relaxed) & 1073741824ULL;
}

bool TRuntimeFeatureFlags::GetEnableSeparationComputeActorsFromRead() const {
    return slot2_.load(std::memory_order_relaxed) & 2147483648ULL;
}

void TRuntimeFeatureFlags::SetEnableSeparationComputeActorsFromRead(bool value) {
    Update_slot2(value ? 3221225472ULL : 1073741824ULL, 3221225472ULL);
}

void TRuntimeFeatureFlags::ClearEnableSeparationComputeActorsFromRead() {
    Update_slot2(2147483648ULL, 3221225472ULL);
}

bool TRuntimeFeatureFlags::HasEnablePQConfigTransactionsAtSchemeShard() const {
    return slot2_.load(std::memory_order_relaxed) & 4294967296ULL;
}

bool TRuntimeFeatureFlags::GetEnablePQConfigTransactionsAtSchemeShard() const {
    return slot2_.load(std::memory_order_relaxed) & 8589934592ULL;
}

void TRuntimeFeatureFlags::SetEnablePQConfigTransactionsAtSchemeShard(bool value) {
    Update_slot2(value ? 12884901888ULL : 4294967296ULL, 12884901888ULL);
}

void TRuntimeFeatureFlags::ClearEnablePQConfigTransactionsAtSchemeShard() {
    Update_slot2(0ULL, 12884901888ULL);
}

bool TRuntimeFeatureFlags::HasEnableScriptExecutionOperations() const {
    return slot2_.load(std::memory_order_relaxed) & 17179869184ULL;
}

bool TRuntimeFeatureFlags::GetEnableScriptExecutionOperations() const {
    return slot2_.load(std::memory_order_relaxed) & 34359738368ULL;
}

void TRuntimeFeatureFlags::SetEnableScriptExecutionOperations(bool value) {
    Update_slot2(value ? 51539607552ULL : 17179869184ULL, 51539607552ULL);
}

void TRuntimeFeatureFlags::ClearEnableScriptExecutionOperations() {
    Update_slot2(34359738368ULL, 51539607552ULL);
}

bool TRuntimeFeatureFlags::HasEnableImplicitQueryParameterTypes() const {
    return slot2_.load(std::memory_order_relaxed) & 68719476736ULL;
}

bool TRuntimeFeatureFlags::GetEnableImplicitQueryParameterTypes() const {
    return slot2_.load(std::memory_order_relaxed) & 137438953472ULL;
}

void TRuntimeFeatureFlags::SetEnableImplicitQueryParameterTypes(bool value) {
    Update_slot2(value ? 206158430208ULL : 68719476736ULL, 206158430208ULL);
}

void TRuntimeFeatureFlags::ClearEnableImplicitQueryParameterTypes() {
    Update_slot2(137438953472ULL, 206158430208ULL);
}

bool TRuntimeFeatureFlags::HasEnableForceImmediateEffectsExecution() const {
    return slot2_.load(std::memory_order_relaxed) & 274877906944ULL;
}

bool TRuntimeFeatureFlags::GetEnableForceImmediateEffectsExecution() const {
    return slot2_.load(std::memory_order_relaxed) & 549755813888ULL;
}

void TRuntimeFeatureFlags::SetEnableForceImmediateEffectsExecution(bool value) {
    Update_slot2(value ? 824633720832ULL : 274877906944ULL, 824633720832ULL);
}

void TRuntimeFeatureFlags::ClearEnableForceImmediateEffectsExecution() {
    Update_slot2(0ULL, 824633720832ULL);
}

bool TRuntimeFeatureFlags::HasEnableTopicSplitMerge() const {
    return slot2_.load(std::memory_order_relaxed) & 1099511627776ULL;
}

bool TRuntimeFeatureFlags::GetEnableTopicSplitMerge() const {
    return slot2_.load(std::memory_order_relaxed) & 2199023255552ULL;
}

void TRuntimeFeatureFlags::SetEnableTopicSplitMerge(bool value) {
    Update_slot2(value ? 3298534883328ULL : 1099511627776ULL, 3298534883328ULL);
}

void TRuntimeFeatureFlags::ClearEnableTopicSplitMerge() {
    Update_slot2(0ULL, 3298534883328ULL);
}

bool TRuntimeFeatureFlags::HasEnableChangefeedDynamoDBStreamsFormat() const {
    return slot2_.load(std::memory_order_relaxed) & 4398046511104ULL;
}

bool TRuntimeFeatureFlags::GetEnableChangefeedDynamoDBStreamsFormat() const {
    return slot2_.load(std::memory_order_relaxed) & 8796093022208ULL;
}

void TRuntimeFeatureFlags::SetEnableChangefeedDynamoDBStreamsFormat(bool value) {
    Update_slot2(value ? 13194139533312ULL : 4398046511104ULL, 13194139533312ULL);
}

void TRuntimeFeatureFlags::ClearEnableChangefeedDynamoDBStreamsFormat() {
    Update_slot2(8796093022208ULL, 13194139533312ULL);
}

bool TRuntimeFeatureFlags::HasForceColumnTablesCompositeMarks() const {
    return slot2_.load(std::memory_order_relaxed) & 17592186044416ULL;
}

bool TRuntimeFeatureFlags::GetForceColumnTablesCompositeMarks() const {
    return slot2_.load(std::memory_order_relaxed) & 35184372088832ULL;
}

void TRuntimeFeatureFlags::SetForceColumnTablesCompositeMarks(bool value) {
    Update_slot2(value ? 52776558133248ULL : 17592186044416ULL, 52776558133248ULL);
}

void TRuntimeFeatureFlags::ClearForceColumnTablesCompositeMarks() {
    Update_slot2(0ULL, 52776558133248ULL);
}

bool TRuntimeFeatureFlags::HasEnableSubscriptionsInDiscovery() const {
    return slot2_.load(std::memory_order_relaxed) & 70368744177664ULL;
}

bool TRuntimeFeatureFlags::GetEnableSubscriptionsInDiscovery() const {
    return slot2_.load(std::memory_order_relaxed) & 140737488355328ULL;
}

void TRuntimeFeatureFlags::SetEnableSubscriptionsInDiscovery(bool value) {
    Update_slot2(value ? 211106232532992ULL : 70368744177664ULL, 211106232532992ULL);
}

void TRuntimeFeatureFlags::ClearEnableSubscriptionsInDiscovery() {
    Update_slot2(0ULL, 211106232532992ULL);
}

bool TRuntimeFeatureFlags::HasEnableGetNodeLabels() const {
    return slot2_.load(std::memory_order_relaxed) & 281474976710656ULL;
}

bool TRuntimeFeatureFlags::GetEnableGetNodeLabels() const {
    return slot2_.load(std::memory_order_relaxed) & 562949953421312ULL;
}

void TRuntimeFeatureFlags::SetEnableGetNodeLabels(bool value) {
    Update_slot2(value ? 844424930131968ULL : 281474976710656ULL, 844424930131968ULL);
}

void TRuntimeFeatureFlags::ClearEnableGetNodeLabels() {
    Update_slot2(0ULL, 844424930131968ULL);
}

bool TRuntimeFeatureFlags::HasEnableTopicMessageMeta() const {
    return slot2_.load(std::memory_order_relaxed) & 1125899906842624ULL;
}

bool TRuntimeFeatureFlags::GetEnableTopicMessageMeta() const {
    return slot2_.load(std::memory_order_relaxed) & 2251799813685248ULL;
}

void TRuntimeFeatureFlags::SetEnableTopicMessageMeta(bool value) {
    Update_slot2(value ? 3377699720527872ULL : 1125899906842624ULL, 3377699720527872ULL);
}

void TRuntimeFeatureFlags::ClearEnableTopicMessageMeta() {
    Update_slot2(2251799813685248ULL, 3377699720527872ULL);
}

bool TRuntimeFeatureFlags::HasEnableIcNodeCache() const {
    return slot2_.load(std::memory_order_relaxed) & 4503599627370496ULL;
}

bool TRuntimeFeatureFlags::GetEnableIcNodeCache() const {
    return slot2_.load(std::memory_order_relaxed) & 9007199254740992ULL;
}

void TRuntimeFeatureFlags::SetEnableIcNodeCache(bool value) {
    Update_slot2(value ? 13510798882111488ULL : 4503599627370496ULL, 13510798882111488ULL);
}

void TRuntimeFeatureFlags::ClearEnableIcNodeCache() {
    Update_slot2(9007199254740992ULL, 13510798882111488ULL);
}

bool TRuntimeFeatureFlags::HasEnableTempTables() const {
    return slot2_.load(std::memory_order_relaxed) & 18014398509481984ULL;
}

bool TRuntimeFeatureFlags::GetEnableTempTables() const {
    return slot2_.load(std::memory_order_relaxed) & 36028797018963968ULL;
}

void TRuntimeFeatureFlags::SetEnableTempTables(bool value) {
    Update_slot2(value ? 54043195528445952ULL : 18014398509481984ULL, 54043195528445952ULL);
}

void TRuntimeFeatureFlags::ClearEnableTempTables() {
    Update_slot2(0ULL, 54043195528445952ULL);
}

bool TRuntimeFeatureFlags::HasSuppressCompatibilityCheck() const {
    return slot2_.load(std::memory_order_relaxed) & 72057594037927936ULL;
}

bool TRuntimeFeatureFlags::GetSuppressCompatibilityCheck() const {
    return slot2_.load(std::memory_order_relaxed) & 144115188075855872ULL;
}

void TRuntimeFeatureFlags::SetSuppressCompatibilityCheck(bool value) {
    Update_slot2(value ? 216172782113783808ULL : 72057594037927936ULL, 216172782113783808ULL);
}

void TRuntimeFeatureFlags::ClearSuppressCompatibilityCheck() {
    Update_slot2(0ULL, 216172782113783808ULL);
}

bool TRuntimeFeatureFlags::HasEnableUniqConstraint() const {
    return slot2_.load(std::memory_order_relaxed) & 288230376151711744ULL;
}

bool TRuntimeFeatureFlags::GetEnableUniqConstraint() const {
    return slot2_.load(std::memory_order_relaxed) & 576460752303423488ULL;
}

void TRuntimeFeatureFlags::SetEnableUniqConstraint(bool value) {
    Update_slot2(value ? 864691128455135232ULL : 288230376151711744ULL, 864691128455135232ULL);
}

void TRuntimeFeatureFlags::ClearEnableUniqConstraint() {
    Update_slot2(576460752303423488ULL, 864691128455135232ULL);
}

bool TRuntimeFeatureFlags::HasEnableChangefeedDebeziumJsonFormat() const {
    return slot2_.load(std::memory_order_relaxed) & 1152921504606846976ULL;
}

bool TRuntimeFeatureFlags::GetEnableChangefeedDebeziumJsonFormat() const {
    return slot2_.load(std::memory_order_relaxed) & 2305843009213693952ULL;
}

void TRuntimeFeatureFlags::SetEnableChangefeedDebeziumJsonFormat(bool value) {
    Update_slot2(value ? 3458764513820540928ULL : 1152921504606846976ULL, 3458764513820540928ULL);
}

void TRuntimeFeatureFlags::ClearEnableChangefeedDebeziumJsonFormat() {
    Update_slot2(0ULL, 3458764513820540928ULL);
}

bool TRuntimeFeatureFlags::HasEnableStatistics() const {
    return slot2_.load(std::memory_order_relaxed) & 4611686018427387904ULL;
}

bool TRuntimeFeatureFlags::GetEnableStatistics() const {
    return slot2_.load(std::memory_order_relaxed) & 9223372036854775808ULL;
}

void TRuntimeFeatureFlags::SetEnableStatistics(bool value) {
    Update_slot2(value ? 13835058055282163712ULL : 4611686018427387904ULL, 13835058055282163712ULL);
}

void TRuntimeFeatureFlags::ClearEnableStatistics() {
    Update_slot2(9223372036854775808ULL, 13835058055282163712ULL);
}

bool TRuntimeFeatureFlags::HasEnableUuidAsPrimaryKey() const {
    return slot3_.load(std::memory_order_relaxed) & 1ULL;
}

bool TRuntimeFeatureFlags::GetEnableUuidAsPrimaryKey() const {
    return slot3_.load(std::memory_order_relaxed) & 2ULL;
}

void TRuntimeFeatureFlags::SetEnableUuidAsPrimaryKey(bool value) {
    Update_slot3(value ? 3ULL : 1ULL, 3ULL);
}

void TRuntimeFeatureFlags::ClearEnableUuidAsPrimaryKey() {
    Update_slot3(2ULL, 3ULL);
}

bool TRuntimeFeatureFlags::HasEnableTablePgTypes() const {
    return slot3_.load(std::memory_order_relaxed) & 4ULL;
}

bool TRuntimeFeatureFlags::GetEnableTablePgTypes() const {
    return slot3_.load(std::memory_order_relaxed) & 8ULL;
}

void TRuntimeFeatureFlags::SetEnableTablePgTypes(bool value) {
    Update_slot3(value ? 12ULL : 4ULL, 12ULL);
}

void TRuntimeFeatureFlags::ClearEnableTablePgTypes() {
    Update_slot3(0ULL, 12ULL);
}

bool TRuntimeFeatureFlags::HasEnableLocalDBBtreeIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 16ULL;
}

bool TRuntimeFeatureFlags::GetEnableLocalDBBtreeIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 32ULL;
}

void TRuntimeFeatureFlags::SetEnableLocalDBBtreeIndex(bool value) {
    Update_slot3(value ? 48ULL : 16ULL, 48ULL);
}

void TRuntimeFeatureFlags::ClearEnableLocalDBBtreeIndex() {
    Update_slot3(32ULL, 48ULL);
}

bool TRuntimeFeatureFlags::HasEnablePDiskHighHDDInFlight() const {
    return slot3_.load(std::memory_order_relaxed) & 64ULL;
}

bool TRuntimeFeatureFlags::GetEnablePDiskHighHDDInFlight() const {
    return slot3_.load(std::memory_order_relaxed) & 128ULL;
}

void TRuntimeFeatureFlags::SetEnablePDiskHighHDDInFlight(bool value) {
    Update_slot3(value ? 192ULL : 64ULL, 192ULL);
}

void TRuntimeFeatureFlags::ClearEnablePDiskHighHDDInFlight() {
    Update_slot3(0ULL, 192ULL);
}

bool TRuntimeFeatureFlags::HasEnableViews() const {
    return slot3_.load(std::memory_order_relaxed) & 256ULL;
}

bool TRuntimeFeatureFlags::GetEnableViews() const {
    return slot3_.load(std::memory_order_relaxed) & 512ULL;
}

void TRuntimeFeatureFlags::SetEnableViews(bool value) {
    Update_slot3(value ? 768ULL : 256ULL, 768ULL);
}

void TRuntimeFeatureFlags::ClearEnableViews() {
    Update_slot3(0ULL, 768ULL);
}

bool TRuntimeFeatureFlags::HasEnableServerlessExclusiveDynamicNodes() const {
    return slot3_.load(std::memory_order_relaxed) & 1024ULL;
}

bool TRuntimeFeatureFlags::GetEnableServerlessExclusiveDynamicNodes() const {
    return slot3_.load(std::memory_order_relaxed) & 2048ULL;
}

void TRuntimeFeatureFlags::SetEnableServerlessExclusiveDynamicNodes(bool value) {
    Update_slot3(value ? 3072ULL : 1024ULL, 3072ULL);
}

void TRuntimeFeatureFlags::ClearEnableServerlessExclusiveDynamicNodes() {
    Update_slot3(0ULL, 3072ULL);
}

bool TRuntimeFeatureFlags::HasEnableAccessServiceBulkAuthorization() const {
    return slot3_.load(std::memory_order_relaxed) & 4096ULL;
}

bool TRuntimeFeatureFlags::GetEnableAccessServiceBulkAuthorization() const {
    return slot3_.load(std::memory_order_relaxed) & 8192ULL;
}

void TRuntimeFeatureFlags::SetEnableAccessServiceBulkAuthorization(bool value) {
    Update_slot3(value ? 12288ULL : 4096ULL, 12288ULL);
}

void TRuntimeFeatureFlags::ClearEnableAccessServiceBulkAuthorization() {
    Update_slot3(0ULL, 12288ULL);
}

bool TRuntimeFeatureFlags::HasEnableAddColumsWithDefaults() const {
    return slot3_.load(std::memory_order_relaxed) & 16384ULL;
}

bool TRuntimeFeatureFlags::GetEnableAddColumsWithDefaults() const {
    return slot3_.load(std::memory_order_relaxed) & 32768ULL;
}

void TRuntimeFeatureFlags::SetEnableAddColumsWithDefaults(bool value) {
    Update_slot3(value ? 49152ULL : 16384ULL, 49152ULL);
}

void TRuntimeFeatureFlags::ClearEnableAddColumsWithDefaults() {
    Update_slot3(0ULL, 49152ULL);
}

bool TRuntimeFeatureFlags::HasEnableReplaceIfExistsForExternalEntities() const {
    return slot3_.load(std::memory_order_relaxed) & 65536ULL;
}

bool TRuntimeFeatureFlags::GetEnableReplaceIfExistsForExternalEntities() const {
    return slot3_.load(std::memory_order_relaxed) & 131072ULL;
}

void TRuntimeFeatureFlags::SetEnableReplaceIfExistsForExternalEntities(bool value) {
    Update_slot3(value ? 196608ULL : 65536ULL, 196608ULL);
}

void TRuntimeFeatureFlags::ClearEnableReplaceIfExistsForExternalEntities() {
    Update_slot3(0ULL, 196608ULL);
}

bool TRuntimeFeatureFlags::HasEnableCMSRequestPriorities() const {
    return slot3_.load(std::memory_order_relaxed) & 262144ULL;
}

bool TRuntimeFeatureFlags::GetEnableCMSRequestPriorities() const {
    return slot3_.load(std::memory_order_relaxed) & 524288ULL;
}

void TRuntimeFeatureFlags::SetEnableCMSRequestPriorities(bool value) {
    Update_slot3(value ? 786432ULL : 262144ULL, 786432ULL);
}

void TRuntimeFeatureFlags::ClearEnableCMSRequestPriorities() {
    Update_slot3(524288ULL, 786432ULL);
}

bool TRuntimeFeatureFlags::HasEnableKeyvalueLogBatching() const {
    return slot3_.load(std::memory_order_relaxed) & 1048576ULL;
}

bool TRuntimeFeatureFlags::GetEnableKeyvalueLogBatching() const {
    return slot3_.load(std::memory_order_relaxed) & 2097152ULL;
}

void TRuntimeFeatureFlags::SetEnableKeyvalueLogBatching(bool value) {
    Update_slot3(value ? 3145728ULL : 1048576ULL, 3145728ULL);
}

void TRuntimeFeatureFlags::ClearEnableKeyvalueLogBatching() {
    Update_slot3(0ULL, 3145728ULL);
}

bool TRuntimeFeatureFlags::HasEnableLocalDBFlatIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 4194304ULL;
}

bool TRuntimeFeatureFlags::GetEnableLocalDBFlatIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 8388608ULL;
}

void TRuntimeFeatureFlags::SetEnableLocalDBFlatIndex(bool value) {
    Update_slot3(value ? 12582912ULL : 4194304ULL, 12582912ULL);
}

void TRuntimeFeatureFlags::ClearEnableLocalDBFlatIndex() {
    Update_slot3(8388608ULL, 12582912ULL);
}

bool TRuntimeFeatureFlags::HasExtendedVDiskCounters() const {
    return slot3_.load(std::memory_order_relaxed) & 16777216ULL;
}

bool TRuntimeFeatureFlags::GetExtendedVDiskCounters() const {
    return slot3_.load(std::memory_order_relaxed) & 33554432ULL;
}

void TRuntimeFeatureFlags::SetExtendedVDiskCounters(bool value) {
    Update_slot3(value ? 50331648ULL : 16777216ULL, 50331648ULL);
}

void TRuntimeFeatureFlags::ClearExtendedVDiskCounters() {
    Update_slot3(33554432ULL, 50331648ULL);
}

bool TRuntimeFeatureFlags::HasExtendedPDiskSensors() const {
    return slot3_.load(std::memory_order_relaxed) & 67108864ULL;
}

bool TRuntimeFeatureFlags::GetExtendedPDiskSensors() const {
    return slot3_.load(std::memory_order_relaxed) & 134217728ULL;
}

void TRuntimeFeatureFlags::SetExtendedPDiskSensors(bool value) {
    Update_slot3(value ? 201326592ULL : 67108864ULL, 201326592ULL);
}

void TRuntimeFeatureFlags::ClearExtendedPDiskSensors() {
    Update_slot3(134217728ULL, 201326592ULL);
}

bool TRuntimeFeatureFlags::HasEnableStableNodeNames() const {
    return slot3_.load(std::memory_order_relaxed) & 268435456ULL;
}

bool TRuntimeFeatureFlags::GetEnableStableNodeNames() const {
    return slot3_.load(std::memory_order_relaxed) & 536870912ULL;
}

void TRuntimeFeatureFlags::SetEnableStableNodeNames(bool value) {
    Update_slot3(value ? 805306368ULL : 268435456ULL, 805306368ULL);
}

void TRuntimeFeatureFlags::ClearEnableStableNodeNames() {
    Update_slot3(0ULL, 805306368ULL);
}

bool TRuntimeFeatureFlags::HasEnableBackupService() const {
    return slot3_.load(std::memory_order_relaxed) & 1073741824ULL;
}

bool TRuntimeFeatureFlags::GetEnableBackupService() const {
    return slot3_.load(std::memory_order_relaxed) & 2147483648ULL;
}

void TRuntimeFeatureFlags::SetEnableBackupService(bool value) {
    Update_slot3(value ? 3221225472ULL : 1073741824ULL, 3221225472ULL);
}

void TRuntimeFeatureFlags::ClearEnableBackupService() {
    Update_slot3(0ULL, 3221225472ULL);
}

bool TRuntimeFeatureFlags::HasEnableVolatileTransactionArbiters() const {
    return slot3_.load(std::memory_order_relaxed) & 4294967296ULL;
}

bool TRuntimeFeatureFlags::GetEnableVolatileTransactionArbiters() const {
    return slot3_.load(std::memory_order_relaxed) & 8589934592ULL;
}

void TRuntimeFeatureFlags::SetEnableVolatileTransactionArbiters(bool value) {
    Update_slot3(value ? 12884901888ULL : 4294967296ULL, 12884901888ULL);
}

void TRuntimeFeatureFlags::ClearEnableVolatileTransactionArbiters() {
    Update_slot3(8589934592ULL, 12884901888ULL);
}

bool TRuntimeFeatureFlags::HasEnableGraphShard() const {
    return slot3_.load(std::memory_order_relaxed) & 17179869184ULL;
}

bool TRuntimeFeatureFlags::GetEnableGraphShard() const {
    return slot3_.load(std::memory_order_relaxed) & 34359738368ULL;
}

void TRuntimeFeatureFlags::SetEnableGraphShard(bool value) {
    Update_slot3(value ? 51539607552ULL : 17179869184ULL, 51539607552ULL);
}

void TRuntimeFeatureFlags::ClearEnableGraphShard() {
    Update_slot3(0ULL, 51539607552ULL);
}

bool TRuntimeFeatureFlags::HasEnableExternalSourceSchemaInference() const {
    return slot3_.load(std::memory_order_relaxed) & 68719476736ULL;
}

bool TRuntimeFeatureFlags::GetEnableExternalSourceSchemaInference() const {
    return slot3_.load(std::memory_order_relaxed) & 137438953472ULL;
}

void TRuntimeFeatureFlags::SetEnableExternalSourceSchemaInference(bool value) {
    Update_slot3(value ? 206158430208ULL : 68719476736ULL, 206158430208ULL);
}

void TRuntimeFeatureFlags::ClearEnableExternalSourceSchemaInference() {
    Update_slot3(0ULL, 206158430208ULL);
}

bool TRuntimeFeatureFlags::HasEnableDbMetadataCache() const {
    return slot3_.load(std::memory_order_relaxed) & 274877906944ULL;
}

bool TRuntimeFeatureFlags::GetEnableDbMetadataCache() const {
    return slot3_.load(std::memory_order_relaxed) & 549755813888ULL;
}

void TRuntimeFeatureFlags::SetEnableDbMetadataCache(bool value) {
    Update_slot3(value ? 824633720832ULL : 274877906944ULL, 824633720832ULL);
}

void TRuntimeFeatureFlags::ClearEnableDbMetadataCache() {
    Update_slot3(0ULL, 824633720832ULL);
}

bool TRuntimeFeatureFlags::HasEnableTableDatetime64() const {
    return slot3_.load(std::memory_order_relaxed) & 1099511627776ULL;
}

bool TRuntimeFeatureFlags::GetEnableTableDatetime64() const {
    return slot3_.load(std::memory_order_relaxed) & 2199023255552ULL;
}

void TRuntimeFeatureFlags::SetEnableTableDatetime64(bool value) {
    Update_slot3(value ? 3298534883328ULL : 1099511627776ULL, 3298534883328ULL);
}

void TRuntimeFeatureFlags::ClearEnableTableDatetime64() {
    Update_slot3(2199023255552ULL, 3298534883328ULL);
}

bool TRuntimeFeatureFlags::HasEnableResourcePools() const {
    return slot3_.load(std::memory_order_relaxed) & 4398046511104ULL;
}

bool TRuntimeFeatureFlags::GetEnableResourcePools() const {
    return slot3_.load(std::memory_order_relaxed) & 8796093022208ULL;
}

void TRuntimeFeatureFlags::SetEnableResourcePools(bool value) {
    Update_slot3(value ? 13194139533312ULL : 4398046511104ULL, 13194139533312ULL);
}

void TRuntimeFeatureFlags::ClearEnableResourcePools() {
    Update_slot3(8796093022208ULL, 13194139533312ULL);
}

bool TRuntimeFeatureFlags::HasEnableColumnStatistics() const {
    return slot3_.load(std::memory_order_relaxed) & 17592186044416ULL;
}

bool TRuntimeFeatureFlags::GetEnableColumnStatistics() const {
    return slot3_.load(std::memory_order_relaxed) & 35184372088832ULL;
}

void TRuntimeFeatureFlags::SetEnableColumnStatistics(bool value) {
    Update_slot3(value ? 52776558133248ULL : 17592186044416ULL, 52776558133248ULL);
}

void TRuntimeFeatureFlags::ClearEnableColumnStatistics() {
    Update_slot3(0ULL, 52776558133248ULL);
}

bool TRuntimeFeatureFlags::HasEnableSingleCompositeActionGroup() const {
    return slot3_.load(std::memory_order_relaxed) & 70368744177664ULL;
}

bool TRuntimeFeatureFlags::GetEnableSingleCompositeActionGroup() const {
    return slot3_.load(std::memory_order_relaxed) & 140737488355328ULL;
}

void TRuntimeFeatureFlags::SetEnableSingleCompositeActionGroup(bool value) {
    Update_slot3(value ? 211106232532992ULL : 70368744177664ULL, 211106232532992ULL);
}

void TRuntimeFeatureFlags::ClearEnableSingleCompositeActionGroup() {
    Update_slot3(0ULL, 211106232532992ULL);
}

bool TRuntimeFeatureFlags::HasEnableResourcePoolsOnServerless() const {
    return slot3_.load(std::memory_order_relaxed) & 281474976710656ULL;
}

bool TRuntimeFeatureFlags::GetEnableResourcePoolsOnServerless() const {
    return slot3_.load(std::memory_order_relaxed) & 562949953421312ULL;
}

void TRuntimeFeatureFlags::SetEnableResourcePoolsOnServerless(bool value) {
    Update_slot3(value ? 844424930131968ULL : 281474976710656ULL, 844424930131968ULL);
}

void TRuntimeFeatureFlags::ClearEnableResourcePoolsOnServerless() {
    Update_slot3(0ULL, 844424930131968ULL);
}

bool TRuntimeFeatureFlags::HasEnableVectorIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 1125899906842624ULL;
}

bool TRuntimeFeatureFlags::GetEnableVectorIndex() const {
    return slot3_.load(std::memory_order_relaxed) & 2251799813685248ULL;
}

void TRuntimeFeatureFlags::SetEnableVectorIndex(bool value) {
    Update_slot3(value ? 3377699720527872ULL : 1125899906842624ULL, 3377699720527872ULL);
}

void TRuntimeFeatureFlags::ClearEnableVectorIndex() {
    Update_slot3(0ULL, 3377699720527872ULL);
}

bool TRuntimeFeatureFlags::HasEnableChangefeedsOnIndexTables() const {
    return slot3_.load(std::memory_order_relaxed) & 4503599627370496ULL;
}

bool TRuntimeFeatureFlags::GetEnableChangefeedsOnIndexTables() const {
    return slot3_.load(std::memory_order_relaxed) & 9007199254740992ULL;
}

void TRuntimeFeatureFlags::SetEnableChangefeedsOnIndexTables(bool value) {
    Update_slot3(value ? 13510798882111488ULL : 4503599627370496ULL, 13510798882111488ULL);
}

void TRuntimeFeatureFlags::ClearEnableChangefeedsOnIndexTables() {
    Update_slot3(0ULL, 13510798882111488ULL);
}

bool TRuntimeFeatureFlags::HasEnableResourcePoolsCounters() const {
    return slot3_.load(std::memory_order_relaxed) & 18014398509481984ULL;
}

bool TRuntimeFeatureFlags::GetEnableResourcePoolsCounters() const {
    return slot3_.load(std::memory_order_relaxed) & 36028797018963968ULL;
}

void TRuntimeFeatureFlags::SetEnableResourcePoolsCounters(bool value) {
    Update_slot3(value ? 54043195528445952ULL : 18014398509481984ULL, 54043195528445952ULL);
}

void TRuntimeFeatureFlags::ClearEnableResourcePoolsCounters() {
    Update_slot3(0ULL, 54043195528445952ULL);
}

bool TRuntimeFeatureFlags::HasEnableOptionalColumnsInColumnShard() const {
    return slot3_.load(std::memory_order_relaxed) & 72057594037927936ULL;
}

bool TRuntimeFeatureFlags::GetEnableOptionalColumnsInColumnShard() const {
    return slot3_.load(std::memory_order_relaxed) & 144115188075855872ULL;
}

void TRuntimeFeatureFlags::SetEnableOptionalColumnsInColumnShard(bool value) {
    Update_slot3(value ? 216172782113783808ULL : 72057594037927936ULL, 216172782113783808ULL);
}

void TRuntimeFeatureFlags::ClearEnableOptionalColumnsInColumnShard() {
    Update_slot3(0ULL, 216172782113783808ULL);
}

bool TRuntimeFeatureFlags::HasEnableGranularTimecast() const {
    return slot3_.load(std::memory_order_relaxed) & 288230376151711744ULL;
}

bool TRuntimeFeatureFlags::GetEnableGranularTimecast() const {
    return slot3_.load(std::memory_order_relaxed) & 576460752303423488ULL;
}

void TRuntimeFeatureFlags::SetEnableGranularTimecast(bool value) {
    Update_slot3(value ? 864691128455135232ULL : 288230376151711744ULL, 864691128455135232ULL);
}

void TRuntimeFeatureFlags::ClearEnableGranularTimecast() {
    Update_slot3(576460752303423488ULL, 864691128455135232ULL);
}

bool TRuntimeFeatureFlags::HasEnableAlterShardingInColumnShard() const {
    return slot3_.load(std::memory_order_relaxed) & 1152921504606846976ULL;
}

bool TRuntimeFeatureFlags::GetEnableAlterShardingInColumnShard() const {
    return slot3_.load(std::memory_order_relaxed) & 2305843009213693952ULL;
}

void TRuntimeFeatureFlags::SetEnableAlterShardingInColumnShard(bool value) {
    Update_slot3(value ? 3458764513820540928ULL : 1152921504606846976ULL, 3458764513820540928ULL);
}

void TRuntimeFeatureFlags::ClearEnableAlterShardingInColumnShard() {
    Update_slot3(0ULL, 3458764513820540928ULL);
}

bool TRuntimeFeatureFlags::HasEnablePgSyntax() const {
    return slot3_.load(std::memory_order_relaxed) & 4611686018427387904ULL;
}

bool TRuntimeFeatureFlags::GetEnablePgSyntax() const {
    return slot3_.load(std::memory_order_relaxed) & 9223372036854775808ULL;
}

void TRuntimeFeatureFlags::SetEnablePgSyntax(bool value) {
    Update_slot3(value ? 13835058055282163712ULL : 4611686018427387904ULL, 13835058055282163712ULL);
}

void TRuntimeFeatureFlags::ClearEnablePgSyntax() {
    Update_slot3(9223372036854775808ULL, 13835058055282163712ULL);
}

bool TRuntimeFeatureFlags::HasEnableTieringInColumnShard() const {
    return slot4_.load(std::memory_order_relaxed) & 1ULL;
}

bool TRuntimeFeatureFlags::GetEnableTieringInColumnShard() const {
    return slot4_.load(std::memory_order_relaxed) & 2ULL;
}

void TRuntimeFeatureFlags::SetEnableTieringInColumnShard(bool value) {
    Update_slot4(value ? 3ULL : 1ULL, 3ULL);
}

void TRuntimeFeatureFlags::ClearEnableTieringInColumnShard() {
    Update_slot4(0ULL, 3ULL);
}

bool TRuntimeFeatureFlags::HasEnableMetadataObjectsOnServerless() const {
    return slot4_.load(std::memory_order_relaxed) & 4ULL;
}

bool TRuntimeFeatureFlags::GetEnableMetadataObjectsOnServerless() const {
    return slot4_.load(std::memory_order_relaxed) & 8ULL;
}

void TRuntimeFeatureFlags::SetEnableMetadataObjectsOnServerless(bool value) {
    Update_slot4(value ? 12ULL : 4ULL, 12ULL);
}

void TRuntimeFeatureFlags::ClearEnableMetadataObjectsOnServerless() {
    Update_slot4(8ULL, 12ULL);
}

bool TRuntimeFeatureFlags::HasEnableOlapCompression() const {
    return slot4_.load(std::memory_order_relaxed) & 16ULL;
}

bool TRuntimeFeatureFlags::GetEnableOlapCompression() const {
    return slot4_.load(std::memory_order_relaxed) & 32ULL;
}

void TRuntimeFeatureFlags::SetEnableOlapCompression(bool value) {
    Update_slot4(value ? 48ULL : 16ULL, 48ULL);
}

void TRuntimeFeatureFlags::ClearEnableOlapCompression() {
    Update_slot4(0ULL, 48ULL);
}

bool TRuntimeFeatureFlags::HasEnableExternalDataSourcesOnServerless() const {
    return slot4_.load(std::memory_order_relaxed) & 64ULL;
}

bool TRuntimeFeatureFlags::GetEnableExternalDataSourcesOnServerless() const {
    return slot4_.load(std::memory_order_relaxed) & 128ULL;
}

void TRuntimeFeatureFlags::SetEnableExternalDataSourcesOnServerless(bool value) {
    Update_slot4(value ? 192ULL : 64ULL, 192ULL);
}

void TRuntimeFeatureFlags::ClearEnableExternalDataSourcesOnServerless() {
    Update_slot4(128ULL, 192ULL);
}

bool TRuntimeFeatureFlags::HasEnableSparsedColumns() const {
    return slot4_.load(std::memory_order_relaxed) & 256ULL;
}

bool TRuntimeFeatureFlags::GetEnableSparsedColumns() const {
    return slot4_.load(std::memory_order_relaxed) & 512ULL;
}

void TRuntimeFeatureFlags::SetEnableSparsedColumns(bool value) {
    Update_slot4(value ? 768ULL : 256ULL, 768ULL);
}

void TRuntimeFeatureFlags::ClearEnableSparsedColumns() {
    Update_slot4(0ULL, 768ULL);
}

bool TRuntimeFeatureFlags::HasEnableParameterizedDecimal() const {
    return slot4_.load(std::memory_order_relaxed) & 1024ULL;
}

bool TRuntimeFeatureFlags::GetEnableParameterizedDecimal() const {
    return slot4_.load(std::memory_order_relaxed) & 2048ULL;
}

void TRuntimeFeatureFlags::SetEnableParameterizedDecimal(bool value) {
    Update_slot4(value ? 3072ULL : 1024ULL, 3072ULL);
}

void TRuntimeFeatureFlags::ClearEnableParameterizedDecimal() {
    Update_slot4(0ULL, 3072ULL);
}

bool TRuntimeFeatureFlags::HasEnableImmediateWritingOnBulkUpsert() const {
    return slot4_.load(std::memory_order_relaxed) & 4096ULL;
}

bool TRuntimeFeatureFlags::GetEnableImmediateWritingOnBulkUpsert() const {
    return slot4_.load(std::memory_order_relaxed) & 8192ULL;
}

void TRuntimeFeatureFlags::SetEnableImmediateWritingOnBulkUpsert(bool value) {
    Update_slot4(value ? 12288ULL : 4096ULL, 12288ULL);
}

void TRuntimeFeatureFlags::ClearEnableImmediateWritingOnBulkUpsert() {
    Update_slot4(0ULL, 12288ULL);
}

bool TRuntimeFeatureFlags::HasEnableInsertWriteIdSpecialColumnCompatibility() const {
    return slot4_.load(std::memory_order_relaxed) & 16384ULL;
}

bool TRuntimeFeatureFlags::GetEnableInsertWriteIdSpecialColumnCompatibility() const {
    return slot4_.load(std::memory_order_relaxed) & 32768ULL;
}

void TRuntimeFeatureFlags::SetEnableInsertWriteIdSpecialColumnCompatibility(bool value) {
    Update_slot4(value ? 49152ULL : 16384ULL, 49152ULL);
}

void TRuntimeFeatureFlags::ClearEnableInsertWriteIdSpecialColumnCompatibility() {
    Update_slot4(0ULL, 49152ULL);
}

bool TRuntimeFeatureFlags::HasEnableTopicAutopartitioningForCDC() const {
    return slot4_.load(std::memory_order_relaxed) & 65536ULL;
}

bool TRuntimeFeatureFlags::GetEnableTopicAutopartitioningForCDC() const {
    return slot4_.load(std::memory_order_relaxed) & 131072ULL;
}

void TRuntimeFeatureFlags::SetEnableTopicAutopartitioningForCDC(bool value) {
    Update_slot4(value ? 196608ULL : 65536ULL, 196608ULL);
}

void TRuntimeFeatureFlags::ClearEnableTopicAutopartitioningForCDC() {
    Update_slot4(0ULL, 196608ULL);
}

bool TRuntimeFeatureFlags::HasEnableWritePortionsOnInsert() const {
    return slot4_.load(std::memory_order_relaxed) & 262144ULL;
}

bool TRuntimeFeatureFlags::GetEnableWritePortionsOnInsert() const {
    return slot4_.load(std::memory_order_relaxed) & 524288ULL;
}

void TRuntimeFeatureFlags::SetEnableWritePortionsOnInsert(bool value) {
    Update_slot4(value ? 786432ULL : 262144ULL, 786432ULL);
}

void TRuntimeFeatureFlags::ClearEnableWritePortionsOnInsert() {
    Update_slot4(0ULL, 786432ULL);
}


} // namespace NKikimr